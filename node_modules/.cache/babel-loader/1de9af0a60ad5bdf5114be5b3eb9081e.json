{"ast":null,"code":"var _jsxFileName = \"/Users/luciano/Desktop/Projetos/SomLivre/novo-frontend/src/pages/editProfile/EditProfile.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport * as Yup from \"yup\";\nimport CPF from \"cpf-check\";\nimport { withFormik, Form, Field, ErrorMessage } from \"formik\";\nimport config from \"../../config/constants\";\nimport { API, Auth } from \"aws-amplify\";\nimport { FormikInput, MaskFormikInput } from \"../../components/elements/Input\";\nimport Botao from \"../../components/elements/Botao\";\nimport PageContainer from \"../../components/features/PageContainer/PageContainer\";\nimport \"../userData/UserData.scss\";\n\nconst onlyNumbers = _text => {\n  const replaced = _text ? _text.replace(/[^\\d]/g, \"\") : \"\";\n  return replaced;\n};\n\nfunction test_cpf(message) {\n  if (message === void 0) {\n    message = \"CPF inválido\";\n  }\n\n  return this.test({\n    message: message,\n    name: \"cpf\",\n    exclusive: true,\n    test: function test(value) {\n      const replaced = onlyNumbers(value);\n      return CPF.validate(replaced);\n    }\n  });\n}\n\nYup.addMethod(Yup.string, \"cpf\", test_cpf);\nconst address_state = [\"AC\", \"AL\", \"AP\", \"AM\", \"BA\", \"CE\", \"DF\", \"ES\", \"GO\", \"MA\", \"MT\", \"MS\", \"MG\", \"PA\", \"PB\", \"PR\", \"PE\", \"PI\", \"RJ\", \"RN\", \"RS\", \"RO\", \"RR\", \"SC\", \"SP\", \"SE\", \"TO\"];\n\nfunction EditProfile(props) {\n  const [user, setUser] = useState({});\n  useEffect(() => {\n    Auth.currentAuthenticatedUser().then(response => {\n      console.log(\"get_authenticated_user, response:\", response);\n      API.get(config.APIS.SOMLIVRE, `usuario/${response.attributes.sub}`, {}).then(response => {\n        console.log(\"get user data bem sucedido. Response: \", response);\n        setUser(response.data);\n      }).catch(error => {\n        console.log(\"get user data falhou: \", error);\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  }, []);\n  return React.createElement(PageContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, React.createElement(\"section\", {\n    className: \"container-userData\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"userData\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, React.createElement(Form, {\n    className: \"form\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, \"Dados pessoais\"), React.createElement(\"div\", {\n    className: \"personalData\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, React.createElement(FormikInput, {\n    id: \"full_name\",\n    name: \"full_name\",\n    type: \"text\",\n    placeholder: \"Seu nome completo\",\n    label: \"Nome completo\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"twoFields\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(MaskFormikInput, {\n    name: \"cpf\",\n    id: \"cpf\",\n    mask: [/[0-9]/, /\\d/, /\\d/, \".\", /\\d/, /\\d/, /\\d/, \".\", /\\d/, /\\d/, /\\d/, \"-\", /\\d/, /\\d/],\n    type: \"text\",\n    placeholder: \"Apenas n\\xFAmeros\",\n    label: \"CPF\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }), React.createElement(MaskFormikInput, {\n    name: \"phone_number\",\n    id: \"phone_number\",\n    mask: [\"(\", /[0-9]/, /\\d/, \")\", \" \", /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, \"-\", /\\d/, /\\d/, /\\d/, /\\d/],\n    type: \"tel\",\n    placeholder: \"Ex: (21) 92345-6789\",\n    label: \"Telefone\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }))), React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, \"Endere\\xE7o\"), React.createElement(\"div\", {\n    className: \"address\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"twoFieldstwo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, React.createElement(\"fieldset\", {\n    className: \"field\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    className: \"label\",\n    htmlFor: \"address_state\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, \"Estado\"), React.createElement(Field, {\n    id: \"address_state\",\n    name: \"address_state\",\n    className: \"input\",\n    placeholder: \"Estado\",\n    required: true,\n    component: \"select\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, React.createElement(\"option\", {\n    value: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, \"UF\"), address_state.map((address_state, index) => React.createElement(\"option\", {\n    value: address_state,\n    key: index,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, address_state))), React.createElement(ErrorMessage, {\n    name: address_state,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, msg => React.createElement(\"div\", {\n    className: \"messageError\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, msg))), React.createElement(FormikInput, {\n    name: \"address_city\",\n    id: \"address_city\",\n    type: \"text\",\n    placeholder: \"Cidade\",\n    label: \"Cidade\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }))), React.createElement(Botao, {\n    classes: \"red big\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }, \"Salvar\")))));\n}\n\n;\nconst EditProfileForm = withRouter(withFormik({\n  mapPropsToValues({\n    address_city,\n    address_complement,\n    address_neighborhood,\n    address_number,\n    address_state,\n    address_street,\n    address_zip_code,\n    cpf,\n    full_name,\n    phone_number\n  }) {\n    return {\n      address_city: address_city || user.address_city,\n      address_complement: address_complement || user.address_complement,\n      address_neighborhood: address_neighborhood || user.address_neighborhood,\n      address_number: address_number || user.address_number,\n      address_state: address_state || user.address_state,\n      address_street: address_street || user.address_street,\n      address_zip_code: address_zip_code || user.address_zip_code,\n      cpf: cpf || user.cpf,\n      full_name: full_name || user.full_name,\n      phone_number: phone_number || user.phone_number\n    };\n  },\n\n  validationSchema: Yup.object().shape({\n    full_name: Yup.string().required(\"Digite seu nome completo!\"),\n    cpf: Yup.string().cpf(\"CPF inválido\").required(\"Campo obrigatório\"),\n    phone_number: Yup.string().required(\"Digite seu telefone!\"),\n    //address_zip_code: Yup.string()\n    //  .length(9)\n    //  .required(\"Campo obrigatório\"),\n    //address_street: Yup.string().required(\"Digite seu endereço!\"),\n    //address_number: Yup.string().required(\"Digite o número da sua casa!\"),\n    address_state: Yup.string().required(\"Digite seu estado de origem!\"),\n    address_city: Yup.string().required(\"Digite sua cidade!\") //address_neighborhood: Yup.string().required(\"Digite seu bairro!\")\n\n  }),\n\n  handleSubmit(values, {\n    props\n  }) {\n    Auth.currentAuthenticatedUser().then(response => {\n      console.log(\"VALUES::: \", values);\n      const options = {\n        body: {\n          address_city: values.address_city,\n          address_complement: values.address_complement,\n          address_neighborhood: values.address_neighborhood,\n          address_number: values.address_number,\n          address_state: values.address_state,\n          address_street: values.address_street,\n          address_zip_code: values.address_zip_code,\n          cpf: values.cpf,\n          email: response.attributes.email,\n          entity_id: response.attributes.sub,\n          full_name: values.full_name,\n          phone_number: values.phone_number\n        }\n      };\n      API.put(config.APIS.SOMLIVRE, \"usuario\", options).then(response => {\n        console.log(\" DADOS DO USUARIOS VALUES : \", options);\n        console.log(\" response : \", response);\n        props.history.push(\"/\");\n      }).catch(error => {\n        console.log(\"Esse é o retorno das options\", options);\n        console.log(\" error : \", error);\n        window.alert(\"Erro ao enviar seus dados, revise os campos.\");\n      });\n    }).catch(error => {\n      console.log(\"erro obtendo usuario atual\", error);\n    });\n  }\n\n})(EditProfile));\nexport default EditProfileForm;","map":{"version":3,"sources":["/Users/luciano/Desktop/Projetos/SomLivre/novo-frontend/src/pages/editProfile/EditProfile.js"],"names":["React","useEffect","useState","withRouter","Yup","CPF","withFormik","Form","Field","ErrorMessage","config","API","Auth","FormikInput","MaskFormikInput","Botao","PageContainer","onlyNumbers","_text","replaced","replace","test_cpf","message","test","name","exclusive","value","validate","addMethod","string","address_state","EditProfile","props","user","setUser","currentAuthenticatedUser","then","response","console","log","get","APIS","SOMLIVRE","attributes","sub","data","catch","error","map","index","msg","EditProfileForm","mapPropsToValues","address_city","address_complement","address_neighborhood","address_number","address_street","address_zip_code","cpf","full_name","phone_number","validationSchema","object","shape","required","handleSubmit","values","options","body","email","entity_id","put","history","push","window","alert"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport * as Yup from \"yup\";\nimport CPF from \"cpf-check\";\nimport { withFormik, Form, Field, ErrorMessage } from \"formik\";\nimport config from \"../../config/constants\";\nimport { API, Auth } from \"aws-amplify\";\n\nimport { FormikInput, MaskFormikInput } from \"../../components/elements/Input\";\nimport Botao from \"../../components/elements/Botao\";\nimport PageContainer from \"../../components/features/PageContainer/PageContainer\";\n\nimport \"../userData/UserData.scss\";\n\nconst onlyNumbers = _text => {\n  const replaced = _text ? _text.replace(/[^\\d]/g, \"\") : \"\";\n  return replaced;\n};\n\nfunction test_cpf(message) {\n  if (message === void 0) {\n    message = \"CPF inválido\";\n  }\n\n  return this.test({\n    message: message,\n    name: \"cpf\",\n    exclusive: true,\n    test: function test(value) {\n      const replaced = onlyNumbers(value);\n      return CPF.validate(replaced);\n    }\n  });\n}\n\nYup.addMethod(Yup.string, \"cpf\", test_cpf);\n\nconst address_state = [\"AC\", \"AL\", \"AP\", \"AM\", \"BA\", \"CE\", \"DF\", \"ES\", \"GO\", \"MA\", \"MT\", \"MS\",\n  \"MG\", \"PA\", \"PB\", \"PR\", \"PE\", \"PI\", \"RJ\", \"RN\", \"RS\", \"RO\", \"RR\", \"SC\",\n  \"SP\", \"SE\", \"TO\"];\n\nfunction EditProfile (props) {\n  const [user, setUser] = useState({})\n  useEffect(() => {\n    Auth.currentAuthenticatedUser()\n      .then(response => {\n        console.log(\"get_authenticated_user, response:\", response);    \n        API.get(config.APIS.SOMLIVRE, `usuario/${response.attributes.sub}`, {})\n        .then(response => {\n            console.log(\"get user data bem sucedido. Response: \", response);\n            setUser(response.data)\n        })\n        .catch(error => {\n          console.log(\"get user data falhou: \", error);\n        });\n      })\n      .catch(error => {\n        console.log(error)   \n      });\n  },[])\n  return (\n    <PageContainer>\n      <section className=\"container-userData\">\n        <div className=\"userData\">\n          <Form className=\"form\">\n            <h3>Dados pessoais</h3>\n            <div className=\"personalData\">\n              <FormikInput\n                id=\"full_name\"\n                name=\"full_name\"\n                type=\"text\"\n                placeholder=\"Seu nome completo\"\n                label=\"Nome completo\"\n                required={true}\n              />\n              <div className=\"twoFields\">\n                <MaskFormikInput\n                  name=\"cpf\"\n                  id=\"cpf\"\n                  mask={[/[0-9]/,/\\d/,/\\d/,\".\",/\\d/,/\\d/,/\\d/,\".\",/\\d/,/\\d/,/\\d/,\"-\",/\\d/,/\\d/]}\n                  type=\"text\"\n                  placeholder=\"Apenas números\"\n                  label=\"CPF\"\n                  required={true}\n                />\n\n                <MaskFormikInput\n                  name=\"phone_number\"\n                  id=\"phone_number\"\n                  mask={[\"(\",/[0-9]/,/\\d/,\")\",\" \",/\\d/,/\\d/,/\\d/,/\\d/,/\\d/,\"-\",/\\d/,/\\d/,/\\d/,/\\d/]}\n                  type=\"tel\"\n                  placeholder=\"Ex: (21) 92345-6789\"\n                  label=\"Telefone\"\n                  required={true}\n                />\n              </div>\n            </div>\n            <h3>Endereço</h3>\n\n            <div className=\"address\">\n              {/*<div className=\"twoFieldstwo\">\n                <MaskFormikInput\n                  name=\"address_zip_code\"\n                  mask={[/[0-9]/,/\\d/,/\\d/,/\\d/,/\\d/,\"-\",/\\d/,/\\d/,/\\d/]}\n                  id=\"address_zip_code\"\n                  type=\"text\"\n                  placeholder=\"Apenas números\"\n                  label=\"cep\"\n                  required={true}\n                />\n\n                <FormikInput\n                  name=\"address_street\"\n                  id=\"address_street\"\n                  type=\"text\"\n                  placeholder=\"Preencha seu endereço\"\n                  label=\"Endereco\"\n                  required={true}\n                />\n              </div>\n              <div className=\"twoFieldstwo\">\n                <FormikInput\n                  name=\"address_number\"\n                  id=\"address_number\"\n                  type=\"text\"\n                  placeholder=\"Número\"\n                  label=\"Número\"\n                  required={true}\n                />\n                <FormikInput\n                  name=\"address_complement\"\n                  id=\"address_complement\"\n                  type=\"text\"\n                  placeholder=\"Complemento\"\n                  label=\"Complemento (opcional)\"\n                />\n              </div> */}\n              <div className=\"twoFieldstwo\">\n\n                <fieldset className=\"field\">\n                  <label className=\"label\" htmlFor=\"address_state\">Estado</label>\n                  <Field id=\"address_state\" name=\"address_state\" className=\"input\" placeholder=\"Estado\" required={true} component=\"select\">\n                    <option value=\"\">UF</option>\n                    { address_state.map((address_state, index) => <option value={ address_state } key={ index }>{ address_state }</option>) }\n                  </Field>\n                  <ErrorMessage name={address_state}>\n                    {msg => <div className=\"messageError\">{msg}</div>}\n                  </ErrorMessage>\n                </fieldset>\n\n                <FormikInput\n                  name=\"address_city\"\n                  id=\"address_city\"\n                  type=\"text\"\n                  placeholder=\"Cidade\"\n                  label=\"Cidade\"\n                  required={true}\n                />\n              {/*<FormikInput\n                  name=\"address_neighborhood\"\n                  id=\"address_neighborhood\"\n                  type=\"text\"\n                  placeholder=\"Bairro\"\n                  label=\"Bairro\"\n                  required={true}\n                /> */}\n              </div>\n            </div>\n            <Botao classes=\"red big\">\n              Salvar\n            </Botao>\n          </Form>\n        </div>\n      </section>\n    </PageContainer>\n  );\n};\n\nconst EditProfileForm = withRouter(\n  withFormik({\n    mapPropsToValues({\n      address_city,\n      address_complement,\n      address_neighborhood,\n      address_number,\n      address_state,\n      address_street,\n      address_zip_code,\n      cpf,\n      full_name,\n      phone_number\n    }) {  \n      return {\n        address_city: address_city || user.address_city,\n        address_complement: address_complement || user.address_complement,\n        address_neighborhood: address_neighborhood || user.address_neighborhood,\n        address_number: address_number || user.address_number,\n        address_state: address_state || user.address_state,\n        address_street: address_street || user.address_street,\n        address_zip_code: address_zip_code || user.address_zip_code,\n        cpf: cpf || user.cpf,\n        full_name: full_name || user.full_name,\n        phone_number: phone_number || user.phone_number\n      };\n    },\n    validationSchema: Yup.object().shape({\n      full_name: Yup.string().required(\"Digite seu nome completo!\"),\n      cpf: Yup.string()\n        .cpf(\"CPF inválido\")\n        .required(\"Campo obrigatório\"),\n      phone_number: Yup.string().required(\"Digite seu telefone!\"),\n      //address_zip_code: Yup.string()\n      //  .length(9)\n      //  .required(\"Campo obrigatório\"),\n      //address_street: Yup.string().required(\"Digite seu endereço!\"),\n      //address_number: Yup.string().required(\"Digite o número da sua casa!\"),\n      address_state: Yup.string().required(\"Digite seu estado de origem!\"),\n      address_city: Yup.string().required(\"Digite sua cidade!\"),\n      //address_neighborhood: Yup.string().required(\"Digite seu bairro!\")\n    }),\n\n    handleSubmit(values, { props }) {\n      Auth.currentAuthenticatedUser()\n        .then(response => {\n          console.log(\"VALUES::: \", values);\n          const options = {\n            body: {\n                address_city: values.address_city,\n                address_complement: values.address_complement,\n                address_neighborhood: values.address_neighborhood,\n                address_number: values.address_number,\n                address_state: values.address_state,\n                address_street: values.address_street,\n                address_zip_code: values.address_zip_code,\n                cpf: values.cpf,\n                email: response.attributes.email,\n                entity_id: response.attributes.sub,\n                full_name: values.full_name,\n                phone_number: values.phone_number\n            }\n          };\n          API.put(config.APIS.SOMLIVRE, \"usuario\", options)\n            .then(response => {\n              console.log(\" DADOS DO USUARIOS VALUES : \", options);\n              console.log(\" response : \", response);\n              props.history.push(\"/\");\n            })\n            .catch(error => {\n              console.log(\"Esse é o retorno das options\", options);\n              console.log(\" error : \", error);\n              window.alert(\"Erro ao enviar seus dados, revise os campos.\");\n            });\n        })\n        .catch(error => {\n          console.log(\"erro obtendo usuario atual\", error);\n        });\n    }\n  })(EditProfile)\n);\n\nexport default EditProfileForm;\n"]},"metadata":{},"sourceType":"module"}