{"ast":null,"code":"var _jsxFileName = \"/Users/luciano/Desktop/Projetos/SomLivre/novo-frontend/src/pages/userData/UserData.js\";\nimport React from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nimport * as Yup from \"yup\";\nimport CPF from \"cpf-check\";\nimport { withFormik, Form, Field, ErrorMessage } from \"formik\";\nimport config from \"../../config/constants\";\nimport { API, Auth } from \"aws-amplify\";\nimport { FormikInput, MaskFormikInput, SimpleInput } from \"../../components/elements/Input\";\nimport Botao from \"../../components/elements/Botao\";\nimport Terms from \"../../components/features/Terms/Terms\";\nimport PageContainer from \"../../components/features/PageContainer/PageContainer\";\nimport \"./UserData.scss\";\n\nconst onlyNumbers = _text => {\n  const replaced = _text ? _text.replace(/[^\\d]/g, \"\") : \"\";\n  return replaced;\n};\n\nfunction test_cpf(message) {\n  if (message === void 0) {\n    message = \"CPF inválido\";\n  }\n\n  return this.test({\n    message: message,\n    name: \"cpf\",\n    exclusive: true,\n    test: function test(value) {\n      const replaced = onlyNumbers(value);\n      return CPF.validate(replaced);\n    }\n  });\n}\n\nYup.addMethod(Yup.string, \"cpf\", test_cpf);\nconst address_state = [\"AC\", \"AL\", \"AP\", \"AM\", \"BA\", \"CE\", \"DF\", \"ES\", \"GO\", \"MA\", \"MT\", \"MS\", \"MG\", \"PA\", \"PB\", \"PR\", \"PE\", \"PI\", \"RJ\", \"RN\", \"RS\", \"RO\", \"RR\", \"SC\", \"SP\", \"SE\", \"TO\"];\n\nfunction UserData(props) {\n  const siteInfo = useSelector(store => store.siteInfo.data);\n  const termLinkStyle = React.createElement(\"span\", {\n    style: {\n      color: \"#c00000\",\n      textDecoration: \"underline\",\n      fontStyle: \"italic\",\n      cursor: \"pointer\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, \"Termos e Condi\\xE7\\xF5es de Uso\");\n  console.log(\"site\", siteInfo);\n  return React.createElement(PageContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(\"section\", {\n    className: \"container-userData\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"userData\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    className: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, \"Quase pronto!\"), React.createElement(Form, {\n    className: \"form\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, \"Dados pessoais\"), React.createElement(\"div\", {\n    className: \"personalData\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, React.createElement(FormikInput, {\n    id: \"full_name\",\n    name: \"full_name\",\n    type: \"text\",\n    placeholder: \"Seu nome completo\",\n    label: \"Nome completo\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"twoFields\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(MaskFormikInput, {\n    name: \"cpf\",\n    id: \"cpf\",\n    mask: [/[0-9]/, /\\d/, /\\d/, \".\", /\\d/, /\\d/, /\\d/, \".\", /\\d/, /\\d/, /\\d/, \"-\", /\\d/, /\\d/],\n    type: \"text\",\n    placeholder: \"Apenas n\\xFAmeros\",\n    label: \"CPF\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }), React.createElement(MaskFormikInput, {\n    name: \"phone_number\",\n    id: \"phone_number\",\n    mask: [\"(\", /[0-9]/, /\\d/, \")\", \" \", /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, \"-\", /\\d/, /\\d/, /\\d/, /\\d/],\n    type: \"tel\",\n    placeholder: \"Ex: (21) 92345-6789\",\n    label: \"Telefone\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }))), React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, \"Endere\\xE7o\"), React.createElement(\"div\", {\n    className: \"address\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"twoFieldstwo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, React.createElement(\"fieldset\", {\n    className: \"field\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    className: \"label\",\n    htmlFor: \"address_state\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, \"Estado\"), React.createElement(Field, {\n    id: \"address_state\",\n    name: \"address_state\",\n    className: \"input\",\n    placeholder: \"Estado\",\n    required: true,\n    component: \"select\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, React.createElement(\"option\", {\n    value: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, \"UF\"), address_state.map((address_state, index) => React.createElement(\"option\", {\n    value: address_state,\n    key: index,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, address_state))), React.createElement(ErrorMessage, {\n    name: address_state,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, msg => React.createElement(\"div\", {\n    className: \"messageError\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, msg))), React.createElement(FormikInput, {\n    name: \"address_city\",\n    id: \"address_city\",\n    type: \"text\",\n    placeholder: \"Cidade\",\n    label: \"Cidade\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"temosUso\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }, \"Termos e Condi\\xE7\\xF5es de uso\"), React.createElement(\"div\", {\n    className: \"check\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }, React.createElement(SimpleInput, {\n    name: \"terms\",\n    id: \"terms\",\n    type: \"checkbox\",\n    placeholder: \"\",\n    label: \"\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }), siteInfo && siteInfo.terms_of_use && React.createElement(Terms, {\n    terms: siteInfo.terms_of_use,\n    linkText: React.createElement(React.Fragment, null, \"Declaro estar ciente e aceitar os \", termLinkStyle, \" da Som Livre.\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }))), React.createElement(Botao, {\n    classes: \"red big\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185\n    },\n    __self: this\n  }, \"Criar conta\")))));\n}\n\n;\nconst UserDataForm = withRouter(withFormik({\n  mapPropsToValues({\n    address_city,\n    address_complement,\n    address_neighborhood,\n    address_number,\n    address_state,\n    address_street,\n    address_zip_code,\n    cpf,\n    full_name,\n    phone_number\n  }) {\n    return {\n      address_city: address_city || \"\",\n      address_complement: address_complement || \"\",\n      address_neighborhood: address_neighborhood || \"\",\n      address_number: address_number || \"\",\n      address_state: address_state || \"\",\n      address_street: address_street || \"\",\n      address_zip_code: address_zip_code || \"\",\n      cpf: cpf || \"\",\n      full_name: full_name || \"\",\n      phone_number: phone_number || \"\"\n    };\n  },\n\n  validationSchema: Yup.object().shape({\n    full_name: Yup.string().required(\"Digite seu nome completo!\"),\n    cpf: Yup.string().cpf(\"CPF inválido\").required(\"Campo obrigatório\"),\n    phone_number: Yup.string().required(\"Digite seu telefone!\"),\n    //address_zip_code: Yup.string()\n    //  .length(9)\n    //  .required(\"Campo obrigatório\"),\n    //address_street: Yup.string().required(\"Digite seu endereço!\"),\n    //address_number: Yup.string().required(\"Digite o número da sua casa!\"),\n    address_state: Yup.string().required(\"Digite seu estado de origem!\"),\n    address_city: Yup.string().required(\"Digite sua cidade!\") //address_neighborhood: Yup.string().required(\"Digite seu bairro!\")\n\n  }),\n\n  handleSubmit(values, {\n    props\n  }) {\n    Auth.currentAuthenticatedUser().then(response => {\n      console.log(\"VALUES::: \", values);\n      const options = {\n        body: {\n          address_city: values.address_city,\n          address_complement: values.address_complement,\n          address_neighborhood: values.address_neighborhood,\n          address_number: values.address_number,\n          address_state: values.address_state,\n          address_street: values.address_street,\n          address_zip_code: values.address_zip_code,\n          cpf: values.cpf,\n          email: response.attributes.email,\n          entity_id: response.attributes.sub,\n          full_name: values.full_name,\n          phone_number: values.phone_number\n        }\n      };\n      API.post(config.APIS.SOMLIVRE, \"usuario\", options).then(response => {\n        console.log(\" DADOS DO USUARIOS VALUES : \", options);\n        console.log(\" response : \", response);\n        props.setUserData(response.data);\n        props.history.push(\"/\");\n      }).catch(error => {\n        console.log(\"Esse é o retorno das options\", options);\n        console.log(\" error : \", error);\n        window.alert(\"Erro ao enviar seus dados, revise os campos.\");\n      });\n    }).catch(error => {\n      console.log(\"erro obtendo usuario atual\", error);\n    });\n  }\n\n})(UserData));\nexport default UserDataForm;","map":{"version":3,"sources":["/Users/luciano/Desktop/Projetos/SomLivre/novo-frontend/src/pages/userData/UserData.js"],"names":["React","withRouter","useSelector","Yup","CPF","withFormik","Form","Field","ErrorMessage","config","API","Auth","FormikInput","MaskFormikInput","SimpleInput","Botao","Terms","PageContainer","onlyNumbers","_text","replaced","replace","test_cpf","message","test","name","exclusive","value","validate","addMethod","string","address_state","UserData","props","siteInfo","store","data","termLinkStyle","color","textDecoration","fontStyle","cursor","console","log","map","index","msg","terms_of_use","UserDataForm","mapPropsToValues","address_city","address_complement","address_neighborhood","address_number","address_street","address_zip_code","cpf","full_name","phone_number","validationSchema","object","shape","required","handleSubmit","values","currentAuthenticatedUser","then","response","options","body","email","attributes","entity_id","sub","post","APIS","SOMLIVRE","setUserData","history","push","catch","error","window","alert"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nimport { withRouter } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nimport * as Yup from \"yup\";\nimport CPF from \"cpf-check\";\nimport { withFormik, Form, Field, ErrorMessage } from \"formik\";\nimport config from \"../../config/constants\";\nimport { API, Auth } from \"aws-amplify\";\n\nimport { FormikInput, MaskFormikInput, SimpleInput } from \"../../components/elements/Input\";\nimport Botao from \"../../components/elements/Botao\";\nimport Terms from \"../../components/features/Terms/Terms\";\nimport PageContainer from \"../../components/features/PageContainer/PageContainer\";\n\nimport \"./UserData.scss\";\n\nconst onlyNumbers = _text => {\n  const replaced = _text ? _text.replace(/[^\\d]/g, \"\") : \"\";\n  return replaced;\n};\n\nfunction test_cpf(message) {\n  if (message === void 0) {\n    message = \"CPF inválido\";\n  }\n\n  return this.test({\n    message: message,\n    name: \"cpf\",\n    exclusive: true,\n    test: function test(value) {\n      const replaced = onlyNumbers(value);\n      return CPF.validate(replaced);\n    }\n  });\n}\n\nYup.addMethod(Yup.string, \"cpf\", test_cpf);\n\nconst address_state = [\"AC\", \"AL\", \"AP\", \"AM\", \"BA\", \"CE\", \"DF\", \"ES\", \"GO\", \"MA\", \"MT\", \"MS\",\n  \"MG\", \"PA\", \"PB\", \"PR\", \"PE\", \"PI\", \"RJ\", \"RN\", \"RS\", \"RO\", \"RR\", \"SC\",\n  \"SP\", \"SE\", \"TO\"];\n\nfunction UserData (props) {\n  const siteInfo = useSelector(store => store.siteInfo.data);\n  const termLinkStyle = (\n    <span\n      style={{\n        color: \"#c00000\",\n        textDecoration: \"underline\",\n        fontStyle: \"italic\",\n        cursor: \"pointer\"\n      }}\n    >\n      Termos e Condições de Uso\n    </span>\n  );\n  console.log(\"site\", siteInfo);\n  return (\n    <PageContainer>\n      <section className=\"container-userData\">\n        <div className=\"userData\">\n          <h2 className=\"title\">Quase pronto!</h2>\n          <Form className=\"form\">\n            <h3>Dados pessoais</h3>\n            <div className=\"personalData\">\n              <FormikInput\n                id=\"full_name\"\n                name=\"full_name\"\n                type=\"text\"\n                placeholder=\"Seu nome completo\"\n                label=\"Nome completo\"\n                required={true}\n              />\n              <div className=\"twoFields\">\n                <MaskFormikInput\n                  name=\"cpf\"\n                  id=\"cpf\"\n                  mask={[/[0-9]/,/\\d/,/\\d/,\".\",/\\d/,/\\d/,/\\d/,\".\",/\\d/,/\\d/,/\\d/,\"-\",/\\d/,/\\d/]}\n                  type=\"text\"\n                  placeholder=\"Apenas números\"\n                  label=\"CPF\"\n                  required={true}\n                />\n\n                <MaskFormikInput\n                  name=\"phone_number\"\n                  id=\"phone_number\"\n                  mask={[\"(\",/[0-9]/,/\\d/,\")\",\" \",/\\d/,/\\d/,/\\d/,/\\d/,/\\d/,\"-\",/\\d/,/\\d/,/\\d/,/\\d/]}\n                  type=\"tel\"\n                  placeholder=\"Ex: (21) 92345-6789\"\n                  label=\"Telefone\"\n                  required={true}\n                />\n              </div>\n            </div>\n            <h3>Endereço</h3>\n\n            <div className=\"address\">\n              {/*<div className=\"twoFieldstwo\">\n                <MaskFormikInput\n                  name=\"address_zip_code\"\n                  mask={[/[0-9]/,/\\d/,/\\d/,/\\d/,/\\d/,\"-\",/\\d/,/\\d/,/\\d/]}\n                  id=\"address_zip_code\"\n                  type=\"text\"\n                  placeholder=\"Apenas números\"\n                  label=\"cep\"\n                  required={true}\n                />\n\n                <FormikInput\n                  name=\"address_street\"\n                  id=\"address_street\"\n                  type=\"text\"\n                  placeholder=\"Preencha seu endereço\"\n                  label=\"Endereco\"\n                  required={true}\n                />\n              </div>\n              <div className=\"twoFieldstwo\">\n                <FormikInput\n                  name=\"address_number\"\n                  id=\"address_number\"\n                  type=\"text\"\n                  placeholder=\"Número\"\n                  label=\"Número\"\n                  required={true}\n                />\n                <FormikInput\n                  name=\"address_complement\"\n                  id=\"address_complement\"\n                  type=\"text\"\n                  placeholder=\"Complemento\"\n                  label=\"Complemento (opcional)\"\n                />\n              </div> */}\n              <div className=\"twoFieldstwo\">\n\n                <fieldset className=\"field\">\n                  <label className=\"label\" htmlFor=\"address_state\">Estado</label>\n                  <Field id=\"address_state\" name=\"address_state\" className=\"input\" placeholder=\"Estado\" required={true} component=\"select\">\n                    <option value=\"\">UF</option>\n                    { address_state.map((address_state, index) => <option value={ address_state } key={ index }>{ address_state }</option>) }\n                  </Field>\n                  <ErrorMessage name={address_state}>\n                    {msg => <div className=\"messageError\">{msg}</div>}\n                  </ErrorMessage>\n                </fieldset>\n\n                <FormikInput\n                  name=\"address_city\"\n                  id=\"address_city\"\n                  type=\"text\"\n                  placeholder=\"Cidade\"\n                  label=\"Cidade\"\n                  required={true}\n                />\n              {/*<FormikInput\n                  name=\"address_neighborhood\"\n                  id=\"address_neighborhood\"\n                  type=\"text\"\n                  placeholder=\"Bairro\"\n                  label=\"Bairro\"\n                  required={true}\n                /> */}\n              </div>\n            </div>\n            <div className=\"temosUso\">\n              <h3>Termos e Condições de uso</h3>\n              <div className=\"check\">\n                <SimpleInput\n                  name=\"terms\"\n                  id=\"terms\"\n                  type=\"checkbox\"\n                  placeholder=\"\"\n                  label=\"\"\n                  required={true}\n                />\n              {siteInfo && siteInfo.terms_of_use &&\n                <Terms terms={siteInfo.terms_of_use} linkText={<>Declaro estar ciente e aceitar os {termLinkStyle} da Som Livre.</>}/>\n              }\n              </div>\n            </div>\n            <Botao classes=\"red big\">\n              Criar conta\n            </Botao>\n          </Form>\n        </div>\n      </section>\n    </PageContainer>\n  );\n};\n\nconst UserDataForm = withRouter(\n  withFormik({\n    mapPropsToValues({\n      address_city,\n      address_complement,\n      address_neighborhood,\n      address_number,\n      address_state,\n      address_street,\n      address_zip_code,\n      cpf,\n      full_name,\n      phone_number\n    }) {\n      return {\n        address_city: address_city || \"\",\n        address_complement: address_complement || \"\",\n        address_neighborhood: address_neighborhood || \"\",\n        address_number: address_number || \"\",\n        address_state: address_state || \"\",\n        address_street: address_street || \"\",\n        address_zip_code: address_zip_code || \"\",\n        cpf: cpf || \"\",\n        full_name: full_name || \"\",\n        phone_number: phone_number || \"\"\n      };\n    },\n    validationSchema: Yup.object().shape({\n      full_name: Yup.string().required(\"Digite seu nome completo!\"),\n      cpf: Yup.string()\n        .cpf(\"CPF inválido\")\n        .required(\"Campo obrigatório\"),\n      phone_number: Yup.string().required(\"Digite seu telefone!\"),\n      //address_zip_code: Yup.string()\n      //  .length(9)\n      //  .required(\"Campo obrigatório\"),\n      //address_street: Yup.string().required(\"Digite seu endereço!\"),\n      //address_number: Yup.string().required(\"Digite o número da sua casa!\"),\n      address_state: Yup.string().required(\"Digite seu estado de origem!\"),\n      address_city: Yup.string().required(\"Digite sua cidade!\"),\n      //address_neighborhood: Yup.string().required(\"Digite seu bairro!\")\n    }),\n\n    handleSubmit(values, { props }) {\n      Auth.currentAuthenticatedUser()\n        .then(response => {\n          console.log(\"VALUES::: \", values);\n          const options = {\n            body: {\n                address_city: values.address_city,\n                address_complement: values.address_complement,\n                address_neighborhood: values.address_neighborhood,\n                address_number: values.address_number,\n                address_state: values.address_state,\n                address_street: values.address_street,\n                address_zip_code: values.address_zip_code,\n                cpf: values.cpf,\n                email: response.attributes.email,\n                entity_id: response.attributes.sub,\n                full_name: values.full_name,\n                phone_number: values.phone_number\n            }\n          };\n          API.post(config.APIS.SOMLIVRE, \"usuario\", options)\n            .then(response => {\n              console.log(\" DADOS DO USUARIOS VALUES : \", options);\n              console.log(\" response : \", response);\n              props.setUserData(response.data)\n              props.history.push(\"/\");\n            })\n            .catch(error => {\n              console.log(\"Esse é o retorno das options\", options);\n              console.log(\" error : \", error);\n              window.alert(\"Erro ao enviar seus dados, revise os campos.\");\n            });\n        })\n        .catch(error => {\n          console.log(\"erro obtendo usuario atual\", error);\n        });\n    }\n  })(UserData)\n);\n\nexport default UserDataForm;\n"]},"metadata":{},"sourceType":"module"}