{"ast":null,"code":"var _jsxFileName = \"/Users/luciano/Desktop/Projetos/SomLivre/novo-frontend/src/pages/editProfile/EditProfile.js\";\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport * as Yup from \"yup\";\nimport CPF from \"cpf-check\";\nimport { withFormik, Form, Field, ErrorMessage } from \"formik\";\nimport config from \"../../config/constants\";\nimport { API, Auth } from \"aws-amplify\";\nimport { FormikInput, MaskFormikInput } from \"../../components/elements/Input\";\nimport Botao from \"../../components/elements/Botao\";\nimport PageContainer from \"../../components/features/PageContainer/PageContainer\";\nimport \"../userData/UserData.scss\";\n\nfunction EditarPerfil(props) {\n  const user = useSelector(state => state.user.data);\n  console.log(user);\n  return React.createElement(React.Fragment, null, React.createElement(\"section\", {\n    className: \"containerEditProfile\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"contentEditProfile\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    className: \"titleEditProfile\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, \"Editar Perfil\"), React.createElement(\"div\", {\n    className: \"containerEditAvatar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"containerAvatar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    id: \"thumbnail\",\n    style: {\n      backgroundImage: `url(${preview}?${Date.now()})`\n    },\n    className: \"thumbnail\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"containerEditRemove\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    className: \"containerPutAvatar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    className: \"iconEdit\",\n    src: iconedit,\n    alt: \"Icon editar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }), React.createElement(\"span\", {\n    className: \"textEdit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, \"Alterar imagem\"), React.createElement(\"input\", {\n    className: \"inputAvatar\",\n    type: \"file\",\n    accept: \"image/*\",\n    onChange: onChangeFile,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  })), React.createElement(\"label\", {\n    className: \"containerPutAvatar\",\n    onClick: removePreview,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    className: \"iconEdit\",\n    src: iconremove,\n    alt: \"Icon remover\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }), React.createElement(\"span\", {\n    className: \"textEdit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, \"Excluir\")))), EditForm(user))));\n}\n\nfunction EditForm(props) {\n  const onlyNumbers = _text => {\n    const replaced = _text ? _text.replace(/[^\\d]/g, \"\") : \"\";\n    return replaced;\n  };\n\n  function test_cpf(message) {\n    if (message === void 0) {\n      message = \"CPF invÃ¡lido\";\n    }\n\n    return this.test({\n      message: message,\n      name: \"cpf\",\n      exclusive: true,\n      test: function test(value) {\n        const replaced = onlyNumbers(value);\n        return CPF.validate(replaced);\n      }\n    });\n  }\n\n  Yup.addMethod(Yup.string, \"cpf\", test_cpf);\n  const address_state = [\"AC\", \"AL\", \"AP\", \"AM\", \"BA\", \"CE\", \"DF\", \"ES\", \"GO\", \"MA\", \"MT\", \"MS\", \"MG\", \"PA\", \"PB\", \"PR\", \"PE\", \"PI\", \"RJ\", \"RN\", \"RS\", \"RO\", \"RR\", \"SC\", \"SP\", \"SE\", \"TO\"];\n  return React.createElement(PageContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(\"section\", {\n    className: \"container-userData\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"userData\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    className: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, \"Quase pronto!\"), React.createElement(Form, {\n    className: \"form\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, \"Dados pessoais\"), React.createElement(\"div\", {\n    className: \"personalData\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, React.createElement(FormikInput, {\n    id: \"full_name\",\n    name: \"full_name\",\n    type: \"text\",\n    placeholder: \"Seu nome completo\",\n    label: \"Nome completo\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"twoFields\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, React.createElement(MaskFormikInput, {\n    name: \"cpf\",\n    id: \"cpf\",\n    mask: [/[0-9]/, /\\d/, /\\d/, \".\", /\\d/, /\\d/, /\\d/, \".\", /\\d/, /\\d/, /\\d/, \"-\", /\\d/, /\\d/],\n    type: \"text\",\n    placeholder: \"Apenas n\\xFAmeros\",\n    label: \"CPF\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }), React.createElement(MaskFormikInput, {\n    name: \"phone_number\",\n    id: \"phone_number\",\n    mask: [\"(\", /[0-9]/, /\\d/, \")\", \" \", /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, \"-\", /\\d/, /\\d/, /\\d/, /\\d/],\n    type: \"tel\",\n    placeholder: \"Ex: (21) 92345-6789\",\n    label: \"Telefone\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }))), React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, \"Endere\\xE7o\"), React.createElement(\"div\", {\n    className: \"address\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"twoFieldstwo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }, React.createElement(\"fieldset\", {\n    className: \"field\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    className: \"label\",\n    htmlFor: \"address_state\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }, \"Estado\"), React.createElement(Field, {\n    id: \"address_state\",\n    name: \"address_state\",\n    className: \"input\",\n    placeholder: \"Estado\",\n    required: true,\n    component: \"select\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }, React.createElement(\"option\", {\n    value: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  }, \"UF\"), address_state.map((address_state, index) => React.createElement(\"option\", {\n    value: address_state,\n    key: index,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }, address_state))), React.createElement(ErrorMessage, {\n    name: address_state,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }, msg => React.createElement(\"div\", {\n    className: \"messageError\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }, msg))), React.createElement(FormikInput, {\n    name: \"address_city\",\n    id: \"address_city\",\n    type: \"text\",\n    placeholder: \"Cidade\",\n    label: \"Cidade\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }))), React.createElement(Botao, {\n    classes: \"red big\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191\n    },\n    __self: this\n  }, \"Salvar\")))));\n}\n\n;\nconst UserDataForm = withRouter(withFormik({\n  mapPropsToValues({\n    address_city,\n    address_complement,\n    address_neighborhood,\n    address_number,\n    address_state,\n    address_street,\n    address_zip_code,\n    cpf,\n    full_name,\n    phone_number\n  }) {\n    return {\n      address_city: address_city || \"\",\n      address_complement: address_complement || \"\",\n      address_neighborhood: address_neighborhood || \"\",\n      address_number: address_number || \"\",\n      address_state: address_state || \"\",\n      address_street: address_street || \"\",\n      address_zip_code: address_zip_code || \"\",\n      cpf: cpf || \"\",\n      full_name: full_name || \"\",\n      phone_number: phone_number || \"\"\n    };\n  },\n\n  validationSchema: Yup.object().shape({\n    full_name: Yup.string().required(\"Digite seu nome completo!\"),\n    cpf: Yup.string().cpf(\"CPF invÃ¡lido\").required(\"Campo obrigatÃ³rio\"),\n    phone_number: Yup.string().required(\"Digite seu telefone!\"),\n    //address_zip_code: Yup.string()\n    //  .length(9)\n    //  .required(\"Campo obrigatÃ³rio\"),\n    //address_street: Yup.string().required(\"Digite seu endereÃ§o!\"),\n    //address_number: Yup.string().required(\"Digite o nÃºmero da sua casa!\"),\n    address_state: Yup.string().required(\"Digite seu estado de origem!\"),\n    address_city: Yup.string().required(\"Digite sua cidade!\") //address_neighborhood: Yup.string().required(\"Digite seu bairro!\")\n\n  }),\n\n  handleSubmit(values, {\n    props\n  }) {\n    const options = {\n      body: {\n        address_city: values.address_city,\n        address_complement: values.address_complement,\n        address_neighborhood: values.address_neighborhood,\n        address_number: values.address_number,\n        address_state: values.address_state,\n        address_street: values.address_street,\n        address_zip_code: values.address_zip_code,\n        cpf: values.cpf,\n        email: response.attributes.email,\n        entity_id: response.attributes.sub,\n        full_name: values.full_name,\n        phone_number: values.phone_number\n      }\n    };\n    API.put(config.APIS.SOMLIVRE, \"usuario\", options).then(response => {\n      console.log(\" DADOS DO USUARIOS VALUES : \", options);\n      console.log(\" response : \", response);\n      props.history.push(\"/perfil\");\n    }).catch(error => {\n      console.log(\"Esse Ã© o retorno das options\", options);\n      console.log(\" error : \", error);\n      window.alert(\"Erro ao enviar seus dados, revise os campos.\");\n    });\n  }\n\n})(EditarPerfil));\nexport default UserDataForm;","map":{"version":3,"sources":["/Users/luciano/Desktop/Projetos/SomLivre/novo-frontend/src/pages/editProfile/EditProfile.js"],"names":["React","useSelector","withRouter","Yup","CPF","withFormik","Form","Field","ErrorMessage","config","API","Auth","FormikInput","MaskFormikInput","Botao","PageContainer","EditarPerfil","props","user","state","data","console","log","backgroundImage","preview","Date","now","iconedit","onChangeFile","removePreview","iconremove","EditForm","onlyNumbers","_text","replaced","replace","test_cpf","message","test","name","exclusive","value","validate","addMethod","string","address_state","map","index","msg","UserDataForm","mapPropsToValues","address_city","address_complement","address_neighborhood","address_number","address_street","address_zip_code","cpf","full_name","phone_number","validationSchema","object","shape","required","handleSubmit","values","options","body","email","response","attributes","entity_id","sub","put","APIS","SOMLIVRE","then","history","push","catch","error","window","alert"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport * as Yup from \"yup\";\nimport CPF from \"cpf-check\";\nimport { withFormik, Form, Field, ErrorMessage } from \"formik\";\nimport config from \"../../config/constants\";\nimport { API, Auth } from \"aws-amplify\";\n\nimport { FormikInput, MaskFormikInput } from \"../../components/elements/Input\";\nimport Botao from \"../../components/elements/Botao\";\nimport PageContainer from \"../../components/features/PageContainer/PageContainer\";\n\nimport \"../userData/UserData.scss\";\n\n\nfunction EditarPerfil(props) {\n  const user = useSelector(state => state.user.data);\n\n  console.log(user)\n\n  return (\n      <>\n          <section className=\"containerEditProfile\">\n              <div className=\"contentEditProfile\">\n                  <h2 className=\"titleEditProfile\">Editar Perfil</h2>\n                  <div className=\"containerEditAvatar\">\n                      <div className=\"containerAvatar\">\n                          <div id=\"thumbnail\"\n                              style={{ backgroundImage: `url(${preview}?${Date.now()})`}}\n                              className=\"thumbnail\"\n                          ></div>\n                      </div>\n                      <div className=\"containerEditRemove\">\n                          <label className=\"containerPutAvatar\">\n                              <img className=\"iconEdit\" src={iconedit} alt=\"Icon editar\" />\n                              <span className=\"textEdit\">Alterar imagem</span>\n                              <input className=\"inputAvatar\" type=\"file\" accept=\"image/*\" onChange={onChangeFile} />\n                          </label>\n                          <label className=\"containerPutAvatar\" onClick={removePreview}>\n                              <img className=\"iconEdit\" src={iconremove} alt=\"Icon remover\" />\n                              <span className=\"textEdit\" >Excluir</span>\n                          </label>\n                      </div>\n                  </div>\n                  {EditForm(user)}\n              </div>\n          </section>\n      </>\n  )\n}\n\nfunction EditForm (props) {\n  \n  const onlyNumbers = _text => {\n    const replaced = _text ? _text.replace(/[^\\d]/g, \"\") : \"\";\n    return replaced;\n  };\n  \n  function test_cpf(message) {\n    if (message === void 0) {\n      message = \"CPF invÃ¡lido\";\n    }\n  \n    return this.test({\n      message: message,\n      name: \"cpf\",\n      exclusive: true,\n      test: function test(value) {\n        const replaced = onlyNumbers(value);\n        return CPF.validate(replaced);\n      }\n    });\n  }\n  \n  Yup.addMethod(Yup.string, \"cpf\", test_cpf);\n  \n  const address_state = [\"AC\", \"AL\", \"AP\", \"AM\", \"BA\", \"CE\", \"DF\", \"ES\", \"GO\", \"MA\", \"MT\", \"MS\",\n    \"MG\", \"PA\", \"PB\", \"PR\", \"PE\", \"PI\", \"RJ\", \"RN\", \"RS\", \"RO\", \"RR\", \"SC\",\n    \"SP\", \"SE\", \"TO\"];\n\n  return (\n    <PageContainer>\n      <section className=\"container-userData\">\n        <div className=\"userData\">\n          <h2 className=\"title\">Quase pronto!</h2>\n          <Form className=\"form\">\n            <h3>Dados pessoais</h3>\n            <div className=\"personalData\">\n              <FormikInput\n                id=\"full_name\"\n                name=\"full_name\"\n                type=\"text\"\n                placeholder=\"Seu nome completo\"\n                label=\"Nome completo\"\n                required={true}\n              />\n              <div className=\"twoFields\">\n                <MaskFormikInput\n                  name=\"cpf\"\n                  id=\"cpf\"\n                  mask={[/[0-9]/,/\\d/,/\\d/,\".\",/\\d/,/\\d/,/\\d/,\".\",/\\d/,/\\d/,/\\d/,\"-\",/\\d/,/\\d/]}\n                  type=\"text\"\n                  placeholder=\"Apenas nÃºmeros\"\n                  label=\"CPF\"\n                  required={true}\n                />\n\n                <MaskFormikInput\n                  name=\"phone_number\"\n                  id=\"phone_number\"\n                  mask={[\"(\",/[0-9]/,/\\d/,\")\",\" \",/\\d/,/\\d/,/\\d/,/\\d/,/\\d/,\"-\",/\\d/,/\\d/,/\\d/,/\\d/]}\n                  type=\"tel\"\n                  placeholder=\"Ex: (21) 92345-6789\"\n                  label=\"Telefone\"\n                  required={true}\n                />\n              </div>\n            </div>\n            <h3>EndereÃ§o</h3>\n\n            <div className=\"address\">\n              {/*<div className=\"twoFieldstwo\">\n                <MaskFormikInput\n                  name=\"address_zip_code\"\n                  mask={[/[0-9]/,/\\d/,/\\d/,/\\d/,/\\d/,\"-\",/\\d/,/\\d/,/\\d/]}\n                  id=\"address_zip_code\"\n                  type=\"text\"\n                  placeholder=\"Apenas nÃºmeros\"\n                  label=\"cep\"\n                  required={true}\n                />\n\n                <FormikInput\n                  name=\"address_street\"\n                  id=\"address_street\"\n                  type=\"text\"\n                  placeholder=\"Preencha seu endereÃ§o\"\n                  label=\"Endereco\"\n                  required={true}\n                />\n              </div>\n              <div className=\"twoFieldstwo\">\n                <FormikInput\n                  name=\"address_number\"\n                  id=\"address_number\"\n                  type=\"text\"\n                  placeholder=\"NÃºmero\"\n                  label=\"NÃºmero\"\n                  required={true}\n                />\n                <FormikInput\n                  name=\"address_complement\"\n                  id=\"address_complement\"\n                  type=\"text\"\n                  placeholder=\"Complemento\"\n                  label=\"Complemento (opcional)\"\n                />\n              </div> */}\n              <div className=\"twoFieldstwo\">\n\n                <fieldset className=\"field\">\n                  <label className=\"label\" htmlFor=\"address_state\">Estado</label>\n                  <Field id=\"address_state\" name=\"address_state\" className=\"input\" placeholder=\"Estado\" required={true} component=\"select\">\n                    <option value=\"\">UF</option>\n                    { address_state.map((address_state, index) => <option value={ address_state } key={ index }>{ address_state }</option>) }\n                  </Field>\n                  <ErrorMessage name={address_state}>\n                    {msg => <div className=\"messageError\">{msg}</div>}\n                  </ErrorMessage>\n                </fieldset>\n\n                <FormikInput\n                  name=\"address_city\"\n                  id=\"address_city\"\n                  type=\"text\"\n                  placeholder=\"Cidade\"\n                  label=\"Cidade\"\n                  required={true}\n                />\n              {/*<FormikInput\n                  name=\"address_neighborhood\"\n                  id=\"address_neighborhood\"\n                  type=\"text\"\n                  placeholder=\"Bairro\"\n                  label=\"Bairro\"\n                  required={true}\n                /> */}\n              </div>\n            </div>\n            <Botao classes=\"red big\">\n              Salvar\n            </Botao>\n          </Form>\n        </div>\n      </section>\n    </PageContainer>\n  );\n};\n\nconst UserDataForm = withRouter(\n  withFormik({\n    mapPropsToValues({\n      address_city,\n      address_complement,\n      address_neighborhood,\n      address_number,\n      address_state,\n      address_street,\n      address_zip_code,\n      cpf,\n      full_name,\n      phone_number\n    }) {\n      return {\n        address_city: address_city || \"\",\n        address_complement: address_complement || \"\",\n        address_neighborhood: address_neighborhood || \"\",\n        address_number: address_number || \"\",\n        address_state: address_state || \"\",\n        address_street: address_street || \"\",\n        address_zip_code: address_zip_code || \"\",\n        cpf: cpf || \"\",\n        full_name: full_name || \"\",\n        phone_number: phone_number || \"\"\n      };\n    },\n    validationSchema: Yup.object().shape({\n      full_name: Yup.string().required(\"Digite seu nome completo!\"),\n      cpf: Yup.string()\n        .cpf(\"CPF invÃ¡lido\")\n        .required(\"Campo obrigatÃ³rio\"),\n      phone_number: Yup.string().required(\"Digite seu telefone!\"),\n      //address_zip_code: Yup.string()\n      //  .length(9)\n      //  .required(\"Campo obrigatÃ³rio\"),\n      //address_street: Yup.string().required(\"Digite seu endereÃ§o!\"),\n      //address_number: Yup.string().required(\"Digite o nÃºmero da sua casa!\"),\n      address_state: Yup.string().required(\"Digite seu estado de origem!\"),\n      address_city: Yup.string().required(\"Digite sua cidade!\"),\n      //address_neighborhood: Yup.string().required(\"Digite seu bairro!\")\n    }),\n\n    handleSubmit(values, { props }) {\n      const options = {\n        body: {\n            address_city: values.address_city,\n            address_complement: values.address_complement,\n            address_neighborhood: values.address_neighborhood,\n            address_number: values.address_number,\n            address_state: values.address_state,\n            address_street: values.address_street,\n            address_zip_code: values.address_zip_code,\n            cpf: values.cpf,\n            email: response.attributes.email,\n            entity_id: response.attributes.sub,\n            full_name: values.full_name,\n            phone_number: values.phone_number\n        }\n      };\n      API.put(config.APIS.SOMLIVRE, \"usuario\", options)\n        .then(response => {\n          console.log(\" DADOS DO USUARIOS VALUES : \", options);\n          console.log(\" response : \", response);\n          props.history.push(\"/perfil\");\n        })\n        .catch(error => {\n          console.log(\"Esse Ã© o retorno das options\", options);\n          console.log(\" error : \", error);\n          window.alert(\"Erro ao enviar seus dados, revise os campos.\");\n        });\n    }\n  })(EditarPerfil)\n);\n\nexport default UserDataForm;\n"]},"metadata":{},"sourceType":"module"}