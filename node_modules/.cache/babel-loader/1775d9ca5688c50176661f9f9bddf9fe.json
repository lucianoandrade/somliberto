{"ast":null,"code":"var _jsxFileName = \"/Users/luciano/Desktop/Projetos/SomLivre/novo-frontend/src/pages/confirmationCode/confirmationCode.js\";\nimport React from \"react\";\nimport { Form, withFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { Auth } from \"aws-amplify\";\nimport { withRouter } from \"react-router-dom\";\nimport { FormikInput } from \"../../components/elements/Input\";\nimport PageContainer from \"../../components/features/PageContainer/PageContainer\";\nimport Botao from \"../../components/elements/Botao\";\nimport \"./confirmationCode.scss\";\n\nconst confirmationCode = props => {\n  return React.createElement(PageContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, React.createElement(\"section\", {\n    className: \"container-confirmation-code\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"code\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    className: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, \"Confirme o c\\xF3digo enviado ao seu e-mail\"), React.createElement(Form, {\n    className: \"form\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, \"Enviamos um c\\xF3digo de confirma\\xE7\\xE3o por e-mail para voc\\xEA. Por favor, digite-o abaixo.\"), React.createElement(FormikInput, {\n    id: \"code\",\n    name: \"code\",\n    type: \"text\",\n    placeholder: \"C\\xF3digo de confirma\\xE7\\xE3o\",\n    label: \"C\\xF3digo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }), React.createElement(Botao, {\n    className: \"botao\",\n    classes: \"red big\",\n    required: props.isSubmitting,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, \"Pr\\xF3ximo\")))));\n};\n\nconst confirmationCodeForm = withRouter(withFormik({\n  mapPropsToValues({\n    code\n  }) {\n    return {\n      code: code || \"\"\n    };\n  },\n\n  validationSchema: Yup.object().shape({\n    code: Yup.string().required(\"Campo obrigatório\").length(6, \"Codigo inválido\")\n  }),\n\n  handleSubmit({\n    code\n  }, {\n    props,\n    setFieldError,\n    setSubmitting\n  }) {\n    setSubmitting(true);\n\n    if (props.location.state.pathname === \"/esquecisenha\") {\n      props.history.push('/novasenha', {\n        email: props.history.location.state.email,\n        code: code\n      });\n    } else {\n      Auth.confirmSignUp(props.history.location.state.email, code.toString()).then(result => {\n        setSubmitting(false);\n        Auth.signIn(props.history.location.state.email, props.history.location.state.senha).then(response => {\n          props.history.push(\"/seusdados\", {\n            email: props.history.location.state.email,\n            senha: props.history.location.state.senha,\n            confirmationCode: code\n          });\n        }).catch(error => {\n          const messageDefault = \"Ocorreu um erro inesperado.\";\n          const selectErrorMessage = {\n            NotAuthorizedException: \"E-mail ou senha incorretos.\",\n            UserNotFoundException: \"O usuário não foi encontrado.\",\n            PasswordResetRequiredException: 'A sua senha foi resetada. Crie uma nova em \"esqueci minha senha\".',\n            InvalidPasswordException: \"A senha deve conter ao mínimo 8 dígitos.\"\n          };\n          return selectErrorMessage[error.code] || messageDefault;\n        });\n      }).catch(error => {\n        window.alert(\"Codigo de confirmação invalido\");\n        setSubmitting(false);\n      });\n    }\n  }\n\n})(confirmationCode));\nexport default confirmationCodeForm;","map":{"version":3,"sources":["/Users/luciano/Desktop/Projetos/SomLivre/novo-frontend/src/pages/confirmationCode/confirmationCode.js"],"names":["React","Form","withFormik","Yup","Auth","withRouter","FormikInput","PageContainer","Botao","confirmationCode","props","isSubmitting","confirmationCodeForm","mapPropsToValues","code","validationSchema","object","shape","string","required","length","handleSubmit","setFieldError","setSubmitting","location","state","pathname","history","push","email","confirmSignUp","toString","then","result","signIn","senha","response","catch","error","messageDefault","selectErrorMessage","NotAuthorizedException","UserNotFoundException","PasswordResetRequiredException","InvalidPasswordException","window","alert"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Form, withFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { Auth } from \"aws-amplify\";\nimport { withRouter } from \"react-router-dom\";\nimport { FormikInput } from \"../../components/elements/Input\";\nimport PageContainer from \"../../components/features/PageContainer/PageContainer\";\nimport Botao from \"../../components/elements/Botao\";\n\nimport \"./confirmationCode.scss\";\n\nconst confirmationCode = props => {\n  \n  return (\n    <PageContainer>\n      <section className=\"container-confirmation-code\">\n        <div className=\"code\">\n          <h2 className=\"title\">Confirme o código enviado ao seu e-mail</h2>\n          <Form className=\"form\">\n            <p>\n              Enviamos um código de confirmação por e-mail para você. Por favor,\n              digite-o abaixo.\n            </p>\n            <FormikInput\n              id=\"code\"\n              name=\"code\"\n              type=\"text\"\n              placeholder=\"Código de confirmação\"\n              label=\"Código\"\n            />\n            <Botao className=\"botao\" classes=\"red big\" required={props.isSubmitting}>\n              Próximo\n            </Botao>\n          </Form>\n        </div>\n      </section>\n    </PageContainer>\n  );\n};\n\nconst confirmationCodeForm = withRouter(\n  withFormik({\n    mapPropsToValues({ code }) {\n      return {\n        code: code || \"\"\n      };\n    },\n    validationSchema: Yup.object().shape({\n      code: Yup.string()\n        .required(\"Campo obrigatório\")\n        .length(6, \"Codigo inválido\")\n    }),\n\n    handleSubmit({ code }, { props, setFieldError, setSubmitting }) {\n      setSubmitting(true);\n\n      if(props.location.state.pathname === \"/esquecisenha\") {\n        props.history.push('/novasenha', {email: props.history.location.state.email, code: code})\n      } else {\n      Auth.confirmSignUp(props.history.location.state.email, code.toString())\n        .then(result => {\n          setSubmitting(false);\n          Auth.signIn(props.history.location.state.email, props.history.location.state.senha)\n            .then(response => {\n              props.history.push(\"/seusdados\", {\n                email: props.history.location.state.email,\n                senha: props.history.location.state.senha,\n                confirmationCode: code\n              });\n            })\n            .catch(error => {\n              const messageDefault = \"Ocorreu um erro inesperado.\";\n\n              const selectErrorMessage = {\n                NotAuthorizedException: \"E-mail ou senha incorretos.\",\n                UserNotFoundException: \"O usuário não foi encontrado.\",\n                PasswordResetRequiredException:\n                  'A sua senha foi resetada. Crie uma nova em \"esqueci minha senha\".',\n                InvalidPasswordException:\n                  \"A senha deve conter ao mínimo 8 dígitos.\"\n              };\n\n              return selectErrorMessage[error.code] || messageDefault;\n            });\n        })\n        .catch(error => {\n          window.alert(\"Codigo de confirmação invalido\");\n          setSubmitting(false);\n        });\n      }\n    }\n  })(confirmationCode)\n);\n\nexport default confirmationCodeForm;\n"]},"metadata":{},"sourceType":"module"}