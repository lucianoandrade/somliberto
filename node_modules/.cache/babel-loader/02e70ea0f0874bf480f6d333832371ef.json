{"ast":null,"code":"var _jsxFileName = \"/Users/luciano/Desktop/Projetos/SomLivre/novo-frontend/src/pages/register/Register.js\";\nimport React from \"react\";\nimport { withRouter, Link } from \"react-router-dom\";\nimport { Auth } from \"aws-amplify\";\nimport * as Yup from \"yup\";\nimport { withFormik, Form } from \"formik\";\nimport { FormikInput } from \"../../components/elements/Input\";\nimport Botao from \"../../components/elements/Botao\";\nimport \"./Register.scss\";\n\nconst Cadastro = props => {\n  return React.createElement(React.Fragment, null, React.createElement(\"section\", {\n    className: \"container-cadastro\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"cadastro\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    className: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, \"Crie sua conta\"), React.createElement(Form, {\n    className: \"form\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, React.createElement(FormikInput, {\n    id: \"email\",\n    type: \"email\",\n    name: \"email\",\n    placeholder: \"Ex: seunome@email.com\",\n    label: \"E-mail\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }), React.createElement(FormikInput, {\n    id: \"senha\",\n    type: \"password\",\n    name: \"senha\",\n    placeholder: \"Sua Senha\",\n    label: \"Senha\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }), React.createElement(FormikInput, {\n    id: \"senha2\",\n    type: \"password\",\n    name: \"senha2\",\n    placeholder: \"Sua senha novamente\",\n    label: \"Repita a senha\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }), React.createElement(Botao, {\n    className: \"botao\",\n    classes: \"red big\",\n    required: props.isSubmitting,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, \"Pr\\xF3ximo\")), React.createElement(\"div\", {\n    className: \"have-account\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(Link, {\n    to: \"/login\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, \"J\\xE1 tenho conta\")))));\n};\n\nconst CadastroForm = withRouter(withFormik({\n  mapPropsToValues({\n    email,\n    senha,\n    senha2\n  }) {\n    return {\n      email: email || \"\",\n      senha: senha || \"\",\n      senha2: senha2 || \"\"\n    };\n  },\n\n  validationSchema: Yup.object().shape({\n    email: Yup.string().required(\"Campo obrigatório\").email(\"Email inválido\"),\n    senha: Yup.string().required(\"Campo obrigatório\").min(8, \"Mínimo 8 caracteres\"),\n    senha2: Yup.string().required(\"Campo obrigatório\")\n  }),\n\n  handleSubmit({\n    email,\n    senha,\n    senha2\n  }, {\n    props,\n    setFieldError,\n    setSubmitting\n  }) {\n    if (senha !== senha2) {\n      setFieldError(\"senha\", \"As senhas digitadas não estão idênticas.\");\n      setFieldError(\"senha2\", \"As senhas digitadas não estão idênticas.\");\n      return;\n    }\n\n    setSubmitting(true);\n    Auth.signUp(email, senha).then(result => {\n      props.history.push(\"/codconfirmacao\", {\n        email: email,\n        senha: senha\n      });\n    }).catch(error => {\n      switch (error.code) {\n        case \"UsernameExistsException\":\n          setFieldError(\"email\", \"Email já está em uso.\");\n          break;\n\n        default:\n          window.alert(\"Erro fazendo signup\");\n          break;\n      }\n\n      setSubmitting(false);\n    });\n  }\n\n})(Cadastro));\nexport default CadastroForm;","map":{"version":3,"sources":["/Users/luciano/Desktop/Projetos/SomLivre/novo-frontend/src/pages/register/Register.js"],"names":["React","withRouter","Link","Auth","Yup","withFormik","Form","FormikInput","Botao","Cadastro","props","isSubmitting","CadastroForm","mapPropsToValues","email","senha","senha2","validationSchema","object","shape","string","required","min","handleSubmit","setFieldError","setSubmitting","signUp","then","result","history","push","catch","error","code","window","alert"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,EAAqBC,IAArB,QAAiC,kBAAjC;AACA,SAASC,IAAT,QAAqB,aAArB;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SAASC,UAAT,EAAqBC,IAArB,QAAiC,QAAjC;AAEA,SAASC,WAAT,QAA4B,iCAA5B;AACA,OAAOC,KAAP,MAAkB,iCAAlB;AAEA,OAAO,iBAAP;;AAEA,MAAMC,QAAQ,GAAGC,KAAK,IAAI;AACxB,SACE,0CACE;AAAS,IAAA,SAAS,EAAC,oBAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,SAAS,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,EAGE,oBAAC,IAAD;AAAM,IAAA,SAAS,EAAC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,WAAD;AACE,IAAA,EAAE,EAAC,OADL;AAEE,IAAA,IAAI,EAAC,OAFP;AAGE,IAAA,IAAI,EAAC,OAHP;AAIE,IAAA,WAAW,EAAC,uBAJd;AAKE,IAAA,KAAK,EAAC,QALR;AAME,IAAA,QAAQ,EAAE,IANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EASE,oBAAC,WAAD;AACE,IAAA,EAAE,EAAC,OADL;AAEE,IAAA,IAAI,EAAC,UAFP;AAGE,IAAA,IAAI,EAAC,OAHP;AAIE,IAAA,WAAW,EAAC,WAJd;AAKE,IAAA,KAAK,EAAC,OALR;AAME,IAAA,QAAQ,EAAE,IANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,EAiBE,oBAAC,WAAD;AACE,IAAA,EAAE,EAAC,QADL;AAEE,IAAA,IAAI,EAAC,UAFP;AAGE,IAAA,IAAI,EAAC,QAHP;AAIE,IAAA,WAAW,EAAC,qBAJd;AAKE,IAAA,KAAK,EAAC,gBALR;AAME,IAAA,QAAQ,EAAE,IANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAjBF,EAyBE,oBAAC,KAAD;AACE,IAAA,SAAS,EAAC,OADZ;AAEE,IAAA,OAAO,EAAC,SAFV;AAGE,IAAA,QAAQ,EAAEA,KAAK,CAACC,YAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAzBF,CAHF,EAqCE;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,EAAE,EAAC,QAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADF,CArCF,CADF,CADF,CADF;AA+CD,CAhDD;;AAkDA,MAAMC,YAAY,GAAGX,UAAU,CAC7BI,UAAU,CAAC;AACTQ,EAAAA,gBAAgB,CAAC;AAAEC,IAAAA,KAAF;AAASC,IAAAA,KAAT;AAAgBC,IAAAA;AAAhB,GAAD,EAA2B;AACzC,WAAO;AACLF,MAAAA,KAAK,EAAEA,KAAK,IAAI,EADX;AAELC,MAAAA,KAAK,EAAEA,KAAK,IAAI,EAFX;AAGLC,MAAAA,MAAM,EAAEA,MAAM,IAAI;AAHb,KAAP;AAKD,GAPQ;;AAQTC,EAAAA,gBAAgB,EAAEb,GAAG,CAACc,MAAJ,GAAaC,KAAb,CAAmB;AACnCL,IAAAA,KAAK,EAAEV,GAAG,CAACgB,MAAJ,GACJC,QADI,CACK,mBADL,EAEJP,KAFI,CAEE,gBAFF,CAD4B;AAInCC,IAAAA,KAAK,EAAEX,GAAG,CAACgB,MAAJ,GACJC,QADI,CACK,mBADL,EAEJC,GAFI,CAEA,CAFA,EAEG,qBAFH,CAJ4B;AAOnCN,IAAAA,MAAM,EAAEZ,GAAG,CAACgB,MAAJ,GAAaC,QAAb,CAAsB,mBAAtB;AAP2B,GAAnB,CART;;AAkBTE,EAAAA,YAAY,CAAC;AAAET,IAAAA,KAAF;AAASC,IAAAA,KAAT;AAAgBC,IAAAA;AAAhB,GAAD,EAA0B;AAAEN,IAAAA,KAAF;AAASc,IAAAA,aAAT;AAAwBC,IAAAA;AAAxB,GAA1B,EAAmE;AAC7E,QAAIV,KAAK,KAAKC,MAAd,EAAsB;AACpBQ,MAAAA,aAAa,CAAC,OAAD,EAAU,0CAAV,CAAb;AACAA,MAAAA,aAAa,CAAC,QAAD,EAAW,0CAAX,CAAb;AACA;AACD;;AACDC,IAAAA,aAAa,CAAC,IAAD,CAAb;AAEAtB,IAAAA,IAAI,CAACuB,MAAL,CAAYZ,KAAZ,EAAmBC,KAAnB,EACGY,IADH,CACQC,MAAM,IAAI;AACdlB,MAAAA,KAAK,CAACmB,OAAN,CAAcC,IAAd,CAAmB,iBAAnB,EAAsC;AAAEhB,QAAAA,KAAK,EAAEA,KAAT;AAAgBC,QAAAA,KAAK,EAAEA;AAAvB,OAAtC;AACD,KAHH,EAIGgB,KAJH,CAISC,KAAK,IAAI;AACd,cAAQA,KAAK,CAACC,IAAd;AACE,aAAK,yBAAL;AACET,UAAAA,aAAa,CAAC,OAAD,EAAU,uBAAV,CAAb;AACA;;AACF;AACEU,UAAAA,MAAM,CAACC,KAAP,CAAa,qBAAb;AACA;AANJ;;AAQAV,MAAAA,aAAa,CAAC,KAAD,CAAb;AACD,KAdH;AAeD;;AAzCQ,CAAD,CAAV,CA0CGhB,QA1CH,CAD6B,CAA/B;AA8CA,eAAeG,YAAf","sourcesContent":["import React from \"react\";\nimport { withRouter, Link } from \"react-router-dom\";\nimport { Auth } from \"aws-amplify\";\nimport * as Yup from \"yup\";\nimport { withFormik, Form } from \"formik\";\n\nimport { FormikInput } from \"../../components/elements/Input\";\nimport Botao from \"../../components/elements/Botao\";\n\nimport \"./Register.scss\";\n\nconst Cadastro = props => {\n  return (\n    <>\n      <section className=\"container-cadastro\">\n        <div className=\"cadastro\">\n          <h2 className=\"title\">Crie sua conta</h2>\n\n          <Form className=\"form\">\n            <FormikInput\n              id=\"email\"\n              type=\"email\"\n              name=\"email\"\n              placeholder=\"Ex: seunome@email.com\"\n              label=\"E-mail\"\n              required={true}\n            />\n            <FormikInput\n              id=\"senha\"\n              type=\"password\"\n              name=\"senha\"\n              placeholder=\"Sua Senha\"\n              label=\"Senha\"\n              required={true}\n            />\n            <FormikInput\n              id=\"senha2\"\n              type=\"password\"\n              name=\"senha2\"\n              placeholder=\"Sua senha novamente\"\n              label=\"Repita a senha\"\n              required={true}\n            />\n            <Botao\n              className=\"botao\"\n              classes=\"red big\"\n              required={props.isSubmitting}\n            >\n              Próximo\n            </Botao>\n          </Form>\n\n          <div className=\"have-account\">\n            <Link to=\"/login\">Já tenho conta</Link>\n          </div>\n        </div>\n      </section>\n    </>\n  );\n};\n\nconst CadastroForm = withRouter(\n  withFormik({\n    mapPropsToValues({ email, senha, senha2 }) {\n      return {\n        email: email || \"\",\n        senha: senha || \"\",\n        senha2: senha2 || \"\"\n      };\n    },\n    validationSchema: Yup.object().shape({\n      email: Yup.string()\n        .required(\"Campo obrigatório\")\n        .email(\"Email inválido\"),\n      senha: Yup.string()\n        .required(\"Campo obrigatório\")\n        .min(8, \"Mínimo 8 caracteres\"),\n      senha2: Yup.string().required(\"Campo obrigatório\")\n    }),\n\n    handleSubmit({ email, senha, senha2 },{ props, setFieldError, setSubmitting }) {\n      if (senha !== senha2) {\n        setFieldError(\"senha\", \"As senhas digitadas não estão idênticas.\");\n        setFieldError(\"senha2\", \"As senhas digitadas não estão idênticas.\");\n        return;\n      }\n      setSubmitting(true);\n\n      Auth.signUp(email, senha)\n        .then(result => {\n          props.history.push(\"/codconfirmacao\", { email: email, senha: senha });\n        })\n        .catch(error => {\n          switch (error.code) {\n            case \"UsernameExistsException\":\n              setFieldError(\"email\", \"Email já está em uso.\");\n              break;\n            default:\n              window.alert(\"Erro fazendo signup\");\n              break;\n          }\n          setSubmitting(false);\n        });\n    }\n  })(Cadastro)\n);\n\nexport default CadastroForm;\n"]},"metadata":{},"sourceType":"module"}