{"ast":null,"code":"var _jsxFileName = \"/Users/luciano/Desktop/Projetos/SomLivre/novo-frontend/src/pages/userData/UserData.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport * as Yup from \"yup\";\nimport CPF from \"cpf-check\";\nimport { withFormik, Form, Field, ErrorMessage } from \"formik\";\nimport config from \"../../config/constants\";\nimport { API, Auth } from \"aws-amplify\";\nimport { FormikInput, MaskFormikInput, SimpleInput } from \"../../components/elements/Input\";\nimport Botao from \"../../components/elements/Botao\";\nimport Termos from \"./termos\"; //temp\n\nimport { setUserData } from \"../../store/actions/user.action\";\nimport { connect } from \"react-redux\";\nimport \"./UserData.scss\";\n\nconst onlyNumbers = _text => {\n  const replaced = _text ? _text.replace(/[^\\d]/g, \"\") : \"\";\n  return replaced;\n};\n\nfunction test_cpf(message) {\n  if (message === void 0) {\n    message = \"CPF invÃ¡lido\";\n  }\n\n  return this.test({\n    message: message,\n    name: \"cpf\",\n    exclusive: true,\n    test: function test(value) {\n      const replaced = onlyNumbers(value);\n      return CPF.validate(replaced);\n    }\n  });\n}\n\nYup.addMethod(Yup.string, \"cpf\", test_cpf);\nconst address_state = [\"AC\", \"AL\", \"AP\", \"AM\", \"BA\", \"CE\", \"DF\", \"ES\", \"GO\", \"MA\", \"MT\", \"MS\", \"MG\", \"PA\", \"PB\", \"PR\", \"PE\", \"PI\", \"RJ\", \"RN\", \"RS\", \"RO\", \"RR\", \"SC\", \"SP\", \"SE\", \"TO\"];\n\nfunction UserData(props) {\n  const [term, setTerm] = useState({});\n  useEffect(() => {\n    API.get(config.APIS.SOMLIVRE_PUBLIC, `site-info`, {}).then(response => {\n      console.log(\"get user data bem sucedido. Response: \", response);\n      setTerm(response.data.terms_of_use);\n    }).catch(error => {\n      console.log(\"get user data falhou: \", error);\n    });\n  }, []);\n  return React.createElement(React.Fragment, null, React.createElement(\"section\", {\n    className: \"container-userData\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"userData\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    className: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, \"Quase pronto!\"), React.createElement(Form, {\n    className: \"form\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, \"Dados pessoais\"), React.createElement(\"div\", {\n    className: \"personalData\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, React.createElement(FormikInput, {\n    id: \"full_name\",\n    name: \"full_name\",\n    type: \"text\",\n    placeholder: \"Seu nome completo\",\n    label: \"Nome completo\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"twoFields\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, React.createElement(MaskFormikInput, {\n    name: \"cpf\",\n    id: \"cpf\",\n    mask: [/[0-9]/, /\\d/, /\\d/, \".\", /\\d/, /\\d/, /\\d/, \".\", /\\d/, /\\d/, /\\d/, \"-\", /\\d/, /\\d/],\n    type: \"text\",\n    placeholder: \"Apenas n\\xFAmeros\",\n    label: \"CPF\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }), React.createElement(MaskFormikInput, {\n    name: \"phone_number\",\n    id: \"phone_number\",\n    mask: [\"(\", /[0-9]/, /\\d/, \")\", \" \", /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, \"-\", /\\d/, /\\d/, /\\d/, /\\d/],\n    type: \"tel\",\n    placeholder: \"Ex: (21) 92345-6789\",\n    label: \"Telefone\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }))), React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, \"Endere\\xE7o\"), React.createElement(\"div\", {\n    className: \"address\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"twoFieldstwo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, React.createElement(MaskFormikInput, {\n    name: \"address_zip_code\",\n    mask: [/[0-9]/, /\\d/, /\\d/, /\\d/, /\\d/, \"-\", /\\d/, /\\d/, /\\d/],\n    id: \"address_zip_code\",\n    type: \"text\",\n    placeholder: \"Apenas n\\xFAmeros\",\n    label: \"cep\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }), React.createElement(FormikInput, {\n    name: \"address_street\",\n    id: \"address_street\",\n    type: \"text\",\n    placeholder: \"Preencha seu endere\\xE7o\",\n    label: \"Endereco\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"twoFieldstwo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, React.createElement(FormikInput, {\n    name: \"address_number\",\n    id: \"address_number\",\n    type: \"text\",\n    placeholder: \"N\\xFAmero\",\n    label: \"N\\xFAmero\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }), React.createElement(FormikInput, {\n    name: \"address_complement\",\n    id: \"address_complement\",\n    type: \"text\",\n    placeholder: \"Complemento\",\n    label: \"Complemento (opcional)\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"threefields\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, React.createElement(\"fieldset\", {\n    className: \"field\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    className: \"label\",\n    htmlFor: \"address_state\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, \"Estado\"), React.createElement(Field, {\n    id: \"address_state\",\n    name: \"address_state\",\n    className: \"input\",\n    placeholder: \"Estado\",\n    required: true,\n    component: \"select\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, React.createElement(\"option\", {\n    value: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, \"UF\"), address_state.map((address_state, index) => React.createElement(\"option\", {\n    value: address_state,\n    key: index,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, address_state))), React.createElement(ErrorMessage, {\n    name: address_state,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, msg => React.createElement(\"div\", {\n    className: \"messageError\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, msg))), React.createElement(FormikInput, {\n    name: \"address_city\",\n    id: \"address_city\",\n    type: \"text\",\n    placeholder: \"Cidade\",\n    label: \"Cidade\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }), React.createElement(FormikInput, {\n    name: \"address_neighborhood\",\n    id: \"address_neighborhood\",\n    type: \"text\",\n    placeholder: \"Bairro\",\n    label: \"Bairro\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"temosUso\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }, \"Termos e Condi\\xE7\\xF5es de uso\"), React.createElement(\"div\", {\n    className: \"check\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }, React.createElement(SimpleInput, {\n    name: \"terms\",\n    id: \"terms\",\n    type: \"checkbox\",\n    placeholder: \"\",\n    label: \"\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }), React.createElement(Termos, {\n    term: term,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }))), React.createElement(Botao, {\n    classes: \"red big\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183\n    },\n    __self: this\n  }, \"Criar conta\")))));\n}\n\n;\nconst UserDataForm = withRouter(withFormik({\n  mapPropsToValues({\n    address_city,\n    address_complement,\n    address_neighborhood,\n    address_number,\n    address_state,\n    address_street,\n    address_zip_code,\n    cpf,\n    full_name,\n    phone_number\n  }) {\n    return {\n      address_city: address_city || \"\",\n      address_complement: address_complement || \"\",\n      address_neighborhood: address_neighborhood || \"\",\n      address_number: address_number || \"\",\n      address_state: address_state || \"\",\n      address_street: address_street || \"\",\n      address_zip_code: address_zip_code || \"\",\n      cpf: cpf || \"\",\n      full_name: full_name || \"\",\n      phone_number: phone_number || \"\"\n    };\n  },\n\n  validationSchema: Yup.object().shape({\n    full_name: Yup.string().required(\"Digite seu nome completo!\"),\n    cpf: Yup.string().cpf(\"CPF invÃ¡lido\").required(\"Campo obrigatÃ³rio\"),\n    phone_number: Yup.string().required(\"Digite seu telefone!\"),\n    address_zip_code: Yup.string().length(9).required(\"Campo obrigatÃ³rio\"),\n    address_street: Yup.string().required(\"Digite seu endereÃ§o!\"),\n    address_number: Yup.string().required(\"Digite o nÃºmero da sua casa!\"),\n    address_state: Yup.string().required(\"Digite seu estado de origem!\"),\n    address_city: Yup.string().required(\"Digite sua cidade!\"),\n    address_neighborhood: Yup.string().required(\"Digite seu bairro!\")\n  }),\n\n  handleSubmit(values, {\n    props\n  }) {\n    Auth.currentAuthenticatedUser().then(response => {\n      console.log(\"VALUES::: \", values);\n      const options = {\n        body: {\n          address_city: values.address_city,\n          address_complement: values.address_complement,\n          address_neighborhood: values.address_neighborhood,\n          address_number: values.address_number,\n          address_state: values.address_state,\n          address_street: values.address_street,\n          address_zip_code: values.address_zip_code,\n          cpf: values.cpf,\n          email: response.attributes.email,\n          entity_id: response.attributes.sub,\n          full_name: values.full_name,\n          phone_number: values.phone_number\n        }\n      };\n      API.post(config.APIS.SOMLIVRE, \"usuario\", options).then(response => {\n        console.log(\" DADOS DO USUARIOS VALUES : \", options);\n        console.log(\" response : \", response);\n        props.setUserData(response.data);\n        props.history.push(\"/\");\n      }).catch(error => {\n        console.log(\"Esse Ã© o retorno das options\", options);\n        console.log(\" error : \", error);\n        window.alert(\"Erro ao enviar seus dados, revise os campos.\");\n      });\n    }).catch(error => {\n      console.log(\"erro obtendo usuario atual\", error);\n    });\n  }\n\n})(UserData));\nexport default connect(state => {\n  const user = state.user;\n  return {\n    user\n  };\n}, {\n  setUserData\n})(UserDataForm);","map":{"version":3,"sources":["/Users/luciano/Desktop/Projetos/SomLivre/novo-frontend/src/pages/userData/UserData.js"],"names":["React","useState","useEffect","withRouter","Yup","CPF","withFormik","Form","Field","ErrorMessage","config","API","Auth","FormikInput","MaskFormikInput","SimpleInput","Botao","Termos","setUserData","connect","onlyNumbers","_text","replaced","replace","test_cpf","message","test","name","exclusive","value","validate","addMethod","string","address_state","UserData","props","term","setTerm","get","APIS","SOMLIVRE_PUBLIC","then","response","console","log","data","terms_of_use","catch","error","map","index","msg","UserDataForm","mapPropsToValues","address_city","address_complement","address_neighborhood","address_number","address_street","address_zip_code","cpf","full_name","phone_number","validationSchema","object","shape","required","length","handleSubmit","values","currentAuthenticatedUser","options","body","email","attributes","entity_id","sub","post","SOMLIVRE","history","push","window","alert","state","user"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AAEA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,OAAOC,GAAP,MAAgB,WAAhB;AACA,SAASC,UAAT,EAAqBC,IAArB,EAA2BC,KAA3B,EAAkCC,YAAlC,QAAsD,QAAtD;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,SAASC,GAAT,EAAcC,IAAd,QAA0B,aAA1B;AAEA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,WAAvC,QAA0D,iCAA1D;AACA,OAAOC,KAAP,MAAkB,iCAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB,C,CAEA;;AACA,SAASC,WAAT,QAA4B,iCAA5B;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAO,iBAAP;;AAEA,MAAMC,WAAW,GAAGC,KAAK,IAAI;AAC3B,QAAMC,QAAQ,GAAGD,KAAK,GAAGA,KAAK,CAACE,OAAN,CAAc,QAAd,EAAwB,EAAxB,CAAH,GAAiC,EAAvD;AACA,SAAOD,QAAP;AACD,CAHD;;AAKA,SAASE,QAAT,CAAkBC,OAAlB,EAA2B;AACzB,MAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;AACtBA,IAAAA,OAAO,GAAG,cAAV;AACD;;AAED,SAAO,KAAKC,IAAL,CAAU;AACfD,IAAAA,OAAO,EAAEA,OADM;AAEfE,IAAAA,IAAI,EAAE,KAFS;AAGfC,IAAAA,SAAS,EAAE,IAHI;AAIfF,IAAAA,IAAI,EAAE,SAASA,IAAT,CAAcG,KAAd,EAAqB;AACzB,YAAMP,QAAQ,GAAGF,WAAW,CAACS,KAAD,CAA5B;AACA,aAAOxB,GAAG,CAACyB,QAAJ,CAAaR,QAAb,CAAP;AACD;AAPc,GAAV,CAAP;AASD;;AAEDlB,GAAG,CAAC2B,SAAJ,CAAc3B,GAAG,CAAC4B,MAAlB,EAA0B,KAA1B,EAAiCR,QAAjC;AAEA,MAAMS,aAAa,GAAG,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,EAA+B,IAA/B,EAAqC,IAArC,EAA2C,IAA3C,EAAiD,IAAjD,EAAuD,IAAvD,EAA6D,IAA7D,EAAmE,IAAnE,EACpB,IADoB,EACd,IADc,EACR,IADQ,EACF,IADE,EACI,IADJ,EACU,IADV,EACgB,IADhB,EACsB,IADtB,EAC4B,IAD5B,EACkC,IADlC,EACwC,IADxC,EAC8C,IAD9C,EAEpB,IAFoB,EAEd,IAFc,EAER,IAFQ,CAAtB;;AAIA,SAASC,QAAT,CAAmBC,KAAnB,EAA0B;AAExB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBpC,QAAQ,CAAC,EAAD,CAAhC;AACAC,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,GAAG,CAAC2B,GAAJ,CAAQ5B,MAAM,CAAC6B,IAAP,CAAYC,eAApB,EAAsC,WAAtC,EAAkD,EAAlD,EACIC,IADJ,CACSC,QAAQ,IAAI;AACfC,MAAAA,OAAO,CAACC,GAAR,CAAY,wCAAZ,EAAsDF,QAAtD;AACAL,MAAAA,OAAO,CAACK,QAAQ,CAACG,IAAT,CAAcC,YAAf,CAAP;AACF,KAJJ,EAKIC,KALJ,CAKUC,KAAK,IAAI;AACbL,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCI,KAAtC;AACF,KAPJ;AAQD,GATQ,EASP,EATO,CAAT;AAWA,SACE,0CACE;AAAS,IAAA,SAAS,EAAC,oBAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,SAAS,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEE,oBAAC,IAAD;AAAM,IAAA,SAAS,EAAC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,EAEE;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,WAAD;AACE,IAAA,EAAE,EAAC,WADL;AAEE,IAAA,IAAI,EAAC,WAFP;AAGE,IAAA,IAAI,EAAC,MAHP;AAIE,IAAA,WAAW,EAAC,mBAJd;AAKE,IAAA,KAAK,EAAC,eALR;AAME,IAAA,QAAQ,EAAE,IANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EASE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,eAAD;AACE,IAAA,IAAI,EAAC,KADP;AAEE,IAAA,EAAE,EAAC,KAFL;AAGE,IAAA,IAAI,EAAE,CAAC,OAAD,EAAS,IAAT,EAAc,IAAd,EAAmB,GAAnB,EAAuB,IAAvB,EAA4B,IAA5B,EAAiC,IAAjC,EAAsC,GAAtC,EAA0C,IAA1C,EAA+C,IAA/C,EAAoD,IAApD,EAAyD,GAAzD,EAA6D,IAA7D,EAAkE,IAAlE,CAHR;AAIE,IAAA,IAAI,EAAC,MAJP;AAKE,IAAA,WAAW,EAAC,mBALd;AAME,IAAA,KAAK,EAAC,KANR;AAOE,IAAA,QAAQ,EAAE,IAPZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAWE,oBAAC,eAAD;AACE,IAAA,IAAI,EAAC,cADP;AAEE,IAAA,EAAE,EAAC,cAFL;AAGE,IAAA,IAAI,EAAE,CAAC,GAAD,EAAK,OAAL,EAAa,IAAb,EAAkB,GAAlB,EAAsB,GAAtB,EAA0B,IAA1B,EAA+B,IAA/B,EAAoC,IAApC,EAAyC,IAAzC,EAA8C,IAA9C,EAAmD,GAAnD,EAAuD,IAAvD,EAA4D,IAA5D,EAAiE,IAAjE,EAAsE,IAAtE,CAHR;AAIE,IAAA,IAAI,EAAC,KAJP;AAKE,IAAA,WAAW,EAAC,qBALd;AAME,IAAA,KAAK,EAAC,UANR;AAOE,IAAA,QAAQ,EAAE,IAPZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXF,CATF,CAFF,EAiCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAjCF,EAkCE;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,eAAD;AACE,IAAA,IAAI,EAAC,kBADP;AAEE,IAAA,IAAI,EAAE,CAAC,OAAD,EAAS,IAAT,EAAc,IAAd,EAAmB,IAAnB,EAAwB,IAAxB,EAA6B,GAA7B,EAAiC,IAAjC,EAAsC,IAAtC,EAA2C,IAA3C,CAFR;AAGE,IAAA,EAAE,EAAC,kBAHL;AAIE,IAAA,IAAI,EAAC,MAJP;AAKE,IAAA,WAAW,EAAC,mBALd;AAME,IAAA,KAAK,EAAC,KANR;AAOE,IAAA,QAAQ,EAAE,IAPZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAWE,oBAAC,WAAD;AACE,IAAA,IAAI,EAAC,gBADP;AAEE,IAAA,EAAE,EAAC,gBAFL;AAGE,IAAA,IAAI,EAAC,MAHP;AAIE,IAAA,WAAW,EAAC,0BAJd;AAKE,IAAA,KAAK,EAAC,UALR;AAME,IAAA,QAAQ,EAAE,IANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXF,CADF,EAqBE;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,WAAD;AACE,IAAA,IAAI,EAAC,gBADP;AAEE,IAAA,EAAE,EAAC,gBAFL;AAGE,IAAA,IAAI,EAAC,MAHP;AAIE,IAAA,WAAW,EAAC,WAJd;AAKE,IAAA,KAAK,EAAC,WALR;AAME,IAAA,QAAQ,EAAE,IANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EASE,oBAAC,WAAD;AACE,IAAA,IAAI,EAAC,oBADP;AAEE,IAAA,EAAE,EAAC,oBAFL;AAGE,IAAA,IAAI,EAAC,MAHP;AAIE,IAAA,WAAW,EAAC,aAJd;AAKE,IAAA,KAAK,EAAC,wBALR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,CArBF,EAsCE;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEE;AAAU,IAAA,SAAS,EAAC,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,SAAS,EAAC,OAAjB;AAAyB,IAAA,OAAO,EAAC,eAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAEE,oBAAC,KAAD;AAAO,IAAA,EAAE,EAAC,eAAV;AAA0B,IAAA,IAAI,EAAC,eAA/B;AAA+C,IAAA,SAAS,EAAC,OAAzD;AAAiE,IAAA,WAAW,EAAC,QAA7E;AAAsF,IAAA,QAAQ,EAAE,IAAhG;AAAsG,IAAA,SAAS,EAAC,QAAhH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAQ,IAAA,KAAK,EAAC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,EAEIf,aAAa,CAACgB,GAAd,CAAkB,CAAChB,aAAD,EAAgBiB,KAAhB,KAA0B;AAAQ,IAAA,KAAK,EAAGjB,aAAhB;AAAgC,IAAA,GAAG,EAAGiB,KAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAgDjB,aAAhD,CAA5C,CAFJ,CAFF,EAME,oBAAC,YAAD;AAAc,IAAA,IAAI,EAAEA,aAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGkB,GAAG,IAAI;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA+BA,GAA/B,CADV,CANF,CAFF,EAaE,oBAAC,WAAD;AACE,IAAA,IAAI,EAAC,cADP;AAEE,IAAA,EAAE,EAAC,cAFL;AAGE,IAAA,IAAI,EAAC,MAHP;AAIE,IAAA,WAAW,EAAC,QAJd;AAKE,IAAA,KAAK,EAAC,QALR;AAME,IAAA,QAAQ,EAAE,IANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAbF,EAqBE,oBAAC,WAAD;AACE,IAAA,IAAI,EAAC,sBADP;AAEE,IAAA,EAAE,EAAC,sBAFL;AAGE,IAAA,IAAI,EAAC,MAHP;AAIE,IAAA,WAAW,EAAC,QAJd;AAKE,IAAA,KAAK,EAAC,QALR;AAME,IAAA,QAAQ,EAAE,IANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IArBF,CAtCF,CAlCF,EAuGE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCADF,EAEE;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,WAAD;AACE,IAAA,IAAI,EAAC,OADP;AAEE,IAAA,EAAE,EAAC,OAFL;AAGE,IAAA,IAAI,EAAC,UAHP;AAIE,IAAA,WAAW,EAAC,EAJd;AAKE,IAAA,KAAK,EAAC,EALR;AAME,IAAA,QAAQ,EAAE,IANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EASE,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAEf,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,CAFF,CAvGF,EAqHE,oBAAC,KAAD;AAAO,IAAA,OAAO,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBArHF,CAFF,CADF,CADF,CADF;AAkID;;AAAA;AAED,MAAMgB,YAAY,GAAGjD,UAAU,CAC7BG,UAAU,CAAC;AACT+C,EAAAA,gBAAgB,CAAC;AACfC,IAAAA,YADe;AAEfC,IAAAA,kBAFe;AAGfC,IAAAA,oBAHe;AAIfC,IAAAA,cAJe;AAKfxB,IAAAA,aALe;AAMfyB,IAAAA,cANe;AAOfC,IAAAA,gBAPe;AAQfC,IAAAA,GARe;AASfC,IAAAA,SATe;AAUfC,IAAAA;AAVe,GAAD,EAWb;AACD,WAAO;AACLR,MAAAA,YAAY,EAAEA,YAAY,IAAI,EADzB;AAELC,MAAAA,kBAAkB,EAAEA,kBAAkB,IAAI,EAFrC;AAGLC,MAAAA,oBAAoB,EAAEA,oBAAoB,IAAI,EAHzC;AAILC,MAAAA,cAAc,EAAEA,cAAc,IAAI,EAJ7B;AAKLxB,MAAAA,aAAa,EAAEA,aAAa,IAAI,EAL3B;AAMLyB,MAAAA,cAAc,EAAEA,cAAc,IAAI,EAN7B;AAOLC,MAAAA,gBAAgB,EAAEA,gBAAgB,IAAI,EAPjC;AAQLC,MAAAA,GAAG,EAAEA,GAAG,IAAI,EARP;AASLC,MAAAA,SAAS,EAAEA,SAAS,IAAI,EATnB;AAULC,MAAAA,YAAY,EAAEA,YAAY,IAAI;AAVzB,KAAP;AAYD,GAzBQ;;AA0BTC,EAAAA,gBAAgB,EAAE3D,GAAG,CAAC4D,MAAJ,GAAaC,KAAb,CAAmB;AACnCJ,IAAAA,SAAS,EAAEzD,GAAG,CAAC4B,MAAJ,GAAakC,QAAb,CAAsB,2BAAtB,CADwB;AAEnCN,IAAAA,GAAG,EAAExD,GAAG,CAAC4B,MAAJ,GACF4B,GADE,CACE,cADF,EAEFM,QAFE,CAEO,mBAFP,CAF8B;AAKnCJ,IAAAA,YAAY,EAAE1D,GAAG,CAAC4B,MAAJ,GAAakC,QAAb,CAAsB,sBAAtB,CALqB;AAMnCP,IAAAA,gBAAgB,EAAEvD,GAAG,CAAC4B,MAAJ,GACfmC,MADe,CACR,CADQ,EAEfD,QAFe,CAEN,mBAFM,CANiB;AASnCR,IAAAA,cAAc,EAAEtD,GAAG,CAAC4B,MAAJ,GAAakC,QAAb,CAAsB,sBAAtB,CATmB;AAUnCT,IAAAA,cAAc,EAAErD,GAAG,CAAC4B,MAAJ,GAAakC,QAAb,CAAsB,8BAAtB,CAVmB;AAWnCjC,IAAAA,aAAa,EAAE7B,GAAG,CAAC4B,MAAJ,GAAakC,QAAb,CAAsB,8BAAtB,CAXoB;AAYnCZ,IAAAA,YAAY,EAAElD,GAAG,CAAC4B,MAAJ,GAAakC,QAAb,CAAsB,oBAAtB,CAZqB;AAanCV,IAAAA,oBAAoB,EAAEpD,GAAG,CAAC4B,MAAJ,GAAakC,QAAb,CAAsB,oBAAtB;AAba,GAAnB,CA1BT;;AA0CTE,EAAAA,YAAY,CAACC,MAAD,EAAS;AAAElC,IAAAA;AAAF,GAAT,EAAoB;AAC9BvB,IAAAA,IAAI,CAAC0D,wBAAL,GACG7B,IADH,CACQC,QAAQ,IAAI;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0ByB,MAA1B;AACA,YAAME,OAAO,GAAG;AACdC,QAAAA,IAAI,EAAE;AACFlB,UAAAA,YAAY,EAAEe,MAAM,CAACf,YADnB;AAEFC,UAAAA,kBAAkB,EAAEc,MAAM,CAACd,kBAFzB;AAGFC,UAAAA,oBAAoB,EAAEa,MAAM,CAACb,oBAH3B;AAIFC,UAAAA,cAAc,EAAEY,MAAM,CAACZ,cAJrB;AAKFxB,UAAAA,aAAa,EAAEoC,MAAM,CAACpC,aALpB;AAMFyB,UAAAA,cAAc,EAAEW,MAAM,CAACX,cANrB;AAOFC,UAAAA,gBAAgB,EAAEU,MAAM,CAACV,gBAPvB;AAQFC,UAAAA,GAAG,EAAES,MAAM,CAACT,GARV;AASFa,UAAAA,KAAK,EAAE/B,QAAQ,CAACgC,UAAT,CAAoBD,KATzB;AAUFE,UAAAA,SAAS,EAAEjC,QAAQ,CAACgC,UAAT,CAAoBE,GAV7B;AAWFf,UAAAA,SAAS,EAAEQ,MAAM,CAACR,SAXhB;AAYFC,UAAAA,YAAY,EAAEO,MAAM,CAACP;AAZnB;AADQ,OAAhB;AAgBAnD,MAAAA,GAAG,CAACkE,IAAJ,CAASnE,MAAM,CAAC6B,IAAP,CAAYuC,QAArB,EAA+B,SAA/B,EAA0CP,OAA1C,EACG9B,IADH,CACQC,QAAQ,IAAI;AAChBC,QAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4C2B,OAA5C;AACA5B,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BF,QAA5B;AACAP,QAAAA,KAAK,CAACjB,WAAN,CAAkBwB,QAAQ,CAACG,IAA3B;AACAV,QAAAA,KAAK,CAAC4C,OAAN,CAAcC,IAAd,CAAmB,GAAnB;AACD,OANH,EAOGjC,KAPH,CAOSC,KAAK,IAAI;AACdL,QAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4C2B,OAA5C;AACA5B,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBI,KAAzB;AACAiC,QAAAA,MAAM,CAACC,KAAP,CAAa,8CAAb;AACD,OAXH;AAYD,KA/BH,EAgCGnC,KAhCH,CAgCSC,KAAK,IAAI;AACdL,MAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CI,KAA1C;AACD,KAlCH;AAmCD;;AA9EQ,CAAD,CAAV,CA+EGd,QA/EH,CAD6B,CAA/B;AAmFA,eAAef,OAAO,CACpBgE,KAAK,IAAI;AACP,QAAMC,IAAI,GAAGD,KAAK,CAACC,IAAnB;AACA,SAAO;AACLA,IAAAA;AADK,GAAP;AAGD,CANmB,EAOpB;AACElE,EAAAA;AADF,CAPoB,CAAP,CAUbkC,YAVa,CAAf","sourcesContent":["import React, {useState ,useEffect} from \"react\";\n\nimport { withRouter } from \"react-router-dom\";\nimport * as Yup from \"yup\";\nimport CPF from \"cpf-check\";\nimport { withFormik, Form, Field, ErrorMessage } from \"formik\";\nimport config from \"../../config/constants\";\nimport { API, Auth } from \"aws-amplify\";\n\nimport { FormikInput, MaskFormikInput, SimpleInput } from \"../../components/elements/Input\";\nimport Botao from \"../../components/elements/Botao\";\nimport Termos from \"./termos\";\n\n//temp\nimport { setUserData } from \"../../store/actions/user.action\";\nimport { connect } from \"react-redux\";\n\nimport \"./UserData.scss\";\n\nconst onlyNumbers = _text => {\n  const replaced = _text ? _text.replace(/[^\\d]/g, \"\") : \"\";\n  return replaced;\n};\n\nfunction test_cpf(message) {\n  if (message === void 0) {\n    message = \"CPF invÃ¡lido\";\n  }\n\n  return this.test({\n    message: message,\n    name: \"cpf\",\n    exclusive: true,\n    test: function test(value) {\n      const replaced = onlyNumbers(value);\n      return CPF.validate(replaced);\n    }\n  });\n}\n\nYup.addMethod(Yup.string, \"cpf\", test_cpf);\n\nconst address_state = [\"AC\", \"AL\", \"AP\", \"AM\", \"BA\", \"CE\", \"DF\", \"ES\", \"GO\", \"MA\", \"MT\", \"MS\",\n  \"MG\", \"PA\", \"PB\", \"PR\", \"PE\", \"PI\", \"RJ\", \"RN\", \"RS\", \"RO\", \"RR\", \"SC\",\n  \"SP\", \"SE\", \"TO\"];\n\nfunction UserData (props) {\n  \n  const [term, setTerm] = useState({});\n  useEffect(() => {\n    API.get(config.APIS.SOMLIVRE_PUBLIC, `site-info`, {})\n       .then(response => {\n          console.log(\"get user data bem sucedido. Response: \", response);\n          setTerm(response.data.terms_of_use)\n       })\n       .catch(error => {\n          console.log(\"get user data falhou: \", error);\n       });\n  },[])\n\n  return (\n    <>\n      <section className=\"container-userData\">\n        <div className=\"userData\">\n          <h2 className=\"title\">Quase pronto!</h2>\n          <Form className=\"form\">\n            <h3>Dados pessoais</h3>\n            <div className=\"personalData\">\n              <FormikInput\n                id=\"full_name\"\n                name=\"full_name\"\n                type=\"text\"\n                placeholder=\"Seu nome completo\"\n                label=\"Nome completo\"\n                required={true}\n              />\n              <div className=\"twoFields\">\n                <MaskFormikInput\n                  name=\"cpf\"\n                  id=\"cpf\"\n                  mask={[/[0-9]/,/\\d/,/\\d/,\".\",/\\d/,/\\d/,/\\d/,\".\",/\\d/,/\\d/,/\\d/,\"-\",/\\d/,/\\d/]}\n                  type=\"text\"\n                  placeholder=\"Apenas nÃºmeros\"\n                  label=\"CPF\"\n                  required={true}\n                />\n\n                <MaskFormikInput\n                  name=\"phone_number\"\n                  id=\"phone_number\"\n                  mask={[\"(\",/[0-9]/,/\\d/,\")\",\" \",/\\d/,/\\d/,/\\d/,/\\d/,/\\d/,\"-\",/\\d/,/\\d/,/\\d/,/\\d/]}\n                  type=\"tel\"\n                  placeholder=\"Ex: (21) 92345-6789\"\n                  label=\"Telefone\"\n                  required={true}\n                />\n              </div>\n            </div>\n            <h3>EndereÃ§o</h3>\n            <div className=\"address\">\n              <div className=\"twoFieldstwo\">\n                <MaskFormikInput\n                  name=\"address_zip_code\"\n                  mask={[/[0-9]/,/\\d/,/\\d/,/\\d/,/\\d/,\"-\",/\\d/,/\\d/,/\\d/]}\n                  id=\"address_zip_code\"\n                  type=\"text\"\n                  placeholder=\"Apenas nÃºmeros\"\n                  label=\"cep\"\n                  required={true}\n                />\n\n                <FormikInput\n                  name=\"address_street\"\n                  id=\"address_street\"\n                  type=\"text\"\n                  placeholder=\"Preencha seu endereÃ§o\"\n                  label=\"Endereco\"\n                  required={true}\n                />\n              </div>\n              <div className=\"twoFieldstwo\">\n                <FormikInput\n                  name=\"address_number\"\n                  id=\"address_number\"\n                  type=\"text\"\n                  placeholder=\"NÃºmero\"\n                  label=\"NÃºmero\"\n                  required={true}\n                />\n                <FormikInput\n                  name=\"address_complement\"\n                  id=\"address_complement\"\n                  type=\"text\"\n                  placeholder=\"Complemento\"\n                  label=\"Complemento (opcional)\"\n                />\n              </div>\n              <div className=\"threefields\">\n\n                <fieldset className=\"field\">  \n                  <label className=\"label\" htmlFor=\"address_state\">Estado</label> \n                  <Field id=\"address_state\" name=\"address_state\" className=\"input\" placeholder=\"Estado\" required={true} component=\"select\">\n                    <option value=\"\">UF</option>\n                    { address_state.map((address_state, index) => <option value={ address_state } key={ index }>{ address_state }</option>) }\n                  </Field>\n                  <ErrorMessage name={address_state}>\n                    {msg => <div className=\"messageError\">{msg}</div>}\n                  </ErrorMessage>\n                </fieldset>\n\n                <FormikInput\n                  name=\"address_city\"\n                  id=\"address_city\"\n                  type=\"text\"\n                  placeholder=\"Cidade\"\n                  label=\"Cidade\"\n                  required={true}\n                />\n                <FormikInput\n                  name=\"address_neighborhood\"\n                  id=\"address_neighborhood\"\n                  type=\"text\"\n                  placeholder=\"Bairro\"\n                  label=\"Bairro\"\n                  required={true}\n                />\n              </div>\n            </div>\n            <div className=\"temosUso\">\n              <h3>Termos e CondiÃ§Ãµes de uso</h3>\n              <div className=\"check\">\n                <SimpleInput\n                  name=\"terms\"\n                  id=\"terms\"\n                  type=\"checkbox\"\n                  placeholder=\"\"\n                  label=\"\"\n                  required={true}\n                />\n                <Termos term={term}/>\n              </div>\n            </div>\n            <Botao classes=\"red big\">\n              Criar conta\n            </Botao>\n          </Form>\n        </div>\n      </section>\n    </>\n  );\n};\n\nconst UserDataForm = withRouter(\n  withFormik({\n    mapPropsToValues({\n      address_city,\n      address_complement,\n      address_neighborhood,\n      address_number,\n      address_state,\n      address_street,\n      address_zip_code,\n      cpf,\n      full_name,\n      phone_number\n    }) {\n      return {\n        address_city: address_city || \"\",\n        address_complement: address_complement || \"\",\n        address_neighborhood: address_neighborhood || \"\",\n        address_number: address_number || \"\",\n        address_state: address_state || \"\",\n        address_street: address_street || \"\",\n        address_zip_code: address_zip_code || \"\",\n        cpf: cpf || \"\",\n        full_name: full_name || \"\",\n        phone_number: phone_number || \"\"\n      };\n    },\n    validationSchema: Yup.object().shape({\n      full_name: Yup.string().required(\"Digite seu nome completo!\"),\n      cpf: Yup.string()\n        .cpf(\"CPF invÃ¡lido\")\n        .required(\"Campo obrigatÃ³rio\"),\n      phone_number: Yup.string().required(\"Digite seu telefone!\"),\n      address_zip_code: Yup.string()\n        .length(9)\n        .required(\"Campo obrigatÃ³rio\"),\n      address_street: Yup.string().required(\"Digite seu endereÃ§o!\"),\n      address_number: Yup.string().required(\"Digite o nÃºmero da sua casa!\"),\n      address_state: Yup.string().required(\"Digite seu estado de origem!\"),\n      address_city: Yup.string().required(\"Digite sua cidade!\"),\n      address_neighborhood: Yup.string().required(\"Digite seu bairro!\")\n    }),\n\n    handleSubmit(values, { props }) {\n      Auth.currentAuthenticatedUser()\n        .then(response => {\n          console.log(\"VALUES::: \", values);\n          const options = {\n            body: {\n                address_city: values.address_city,\n                address_complement: values.address_complement,\n                address_neighborhood: values.address_neighborhood,\n                address_number: values.address_number,\n                address_state: values.address_state,\n                address_street: values.address_street,\n                address_zip_code: values.address_zip_code,\n                cpf: values.cpf,\n                email: response.attributes.email,\n                entity_id: response.attributes.sub,\n                full_name: values.full_name,\n                phone_number: values.phone_number\n            }\n          };\n          API.post(config.APIS.SOMLIVRE, \"usuario\", options)\n            .then(response => {\n              console.log(\" DADOS DO USUARIOS VALUES : \", options);\n              console.log(\" response : \", response);\n              props.setUserData(response.data)\n              props.history.push(\"/\");\n            })\n            .catch(error => {\n              console.log(\"Esse Ã© o retorno das options\", options);\n              console.log(\" error : \", error);\n              window.alert(\"Erro ao enviar seus dados, revise os campos.\");\n            });\n        })\n        .catch(error => {\n          console.log(\"erro obtendo usuario atual\", error);\n        });\n    }\n  })(UserData)\n);\n\nexport default connect(\n  state => {\n    const user = state.user;\n    return {\n      user\n    };\n  },\n  {\n    setUserData\n  }\n)(UserDataForm);\n"]},"metadata":{},"sourceType":"module"}